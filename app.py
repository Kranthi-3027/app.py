# -------------------------------------------------
# Multi-Sector Document Analysis App (app.py)
# -------------------------------------------------
import os, io, re, time, html, hashlib
from dotenv import load_dotenv

load_dotenv()

import streamlit as st
import PyPDF2, docx
from PIL import Image
import pytesseract
from langdetect import detect
import google.generativeai as genai
from gtts import gTTS

API_KEY = os.getenv("GEMINI_KEY")
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash-lite")

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# CONFIG & SESSION STATE
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
OCR_API_KEY = os.getenv("OCR_API_KEY")

pytesseract.pytesseract.tesseract_cmd = os.getenv(
    "TESSERACT_PATH",
    r"C:\Program Files\Tesseract-OCR\tesseract.exe"
)

st.set_page_config(page_title="Document Analysis Hub", page_icon="ЁЯФН", layout="centered")

# Global style
st.markdown("""
<style>
html, body, [class*="css"] {
  font-family: "Noto Sans", "Noto Sans Telugu", "Noto Sans Devanagari", system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Color Emoji", "Apple Color Emoji", "Segoe UI Emoji", sans-serif;
}
.big-button {
    font-size: 20px !important;
    padding: 20px !important;
    margin: 10px 0 !important;
    text-align: center !important;
    border-radius: 10px !important;
}
.sector-button {
    font-size: 48px !important;
    padding: 30px !important;
    margin: 15px !important;
    text-align: center !important;
    border-radius: 15px !important;
}
</style>
""", unsafe_allow_html=True)

# Initialize session state
DEFAULT_STATE = {
    "language_selected": False,
    "sector_selected": False,
    "selected_language": "",
    "selected_sector": "",
    "doc_text": "",
    "summary": "",
    "chat_history": [],
    "general_messages": [],
    "resp_lang": "Auto (match user)",
    "ocr_lang": "Auto",
    "last_user_input": ""
}

for k, v in DEFAULT_STATE.items():
    st.session_state.setdefault(k, v)

# Language and sector configurations
LANGUAGES = {
    "English": "ЁЯЗ║ЁЯЗ╕",
    "рд╣рд┐рдВрджреА": "ЁЯЗоЁЯЗ│", 
    "р░др▒Жр░▓р▒Бр░Чр▒Б": "ЁЯЗоЁЯЗ│",
    "╪з╪▒╪п┘И": "ЁЯЗ╡ЁЯЗ░"
}

SECTORS = {
    "Law": {"emoji": "тЪЦя╕П", "symbol": "┬з"},
    "Medical": {"emoji": "ЁЯПе", "symbol": "+"},
    "Agriculture": {"emoji": "ЁЯМ╛", "symbol": "ЁЯЪЬ"}
}

LANG_CODE_MAP_TTS = {"English": "en", "рд╣рд┐рдВрджреА": "hi", "р░др▒Жр░▓р▒Бр░Чр▒Б": "te", "╪з╪▒╪п┘И": "ur"}
LANG_CODE_MAP_OCR = {"English": "eng", "рд╣рд┐рдВрджреА": "hin", "р░др▒Жр░▓р▒Бр░Чр▒Б": "tel", "╪з╪▒╪п┘И": "urd"}

# UI Translations
UI_TRANSLATIONS = {
    "English": {
        "select_language": "ЁЯМН Select Your Language",
        "choose_language": "Choose your preferred language to continue",
        "choose_sector": "Choose Your Sector",
        "selected_language": "Selected Language",
        "legal_docs": "Legal documents & consultation",
        "medical_reports": "Medical reports & analysis", 
        "agro_reports": "Agricultural reports & guidance",
        "back_language": "тЖР Back to Language Selection",
        "settings": "тЪЩя╕П Settings",
        "change_lang_sector": "ЁЯФД Change Language/Sector",
        "current": "Current",
        "upload_analyze": "Upload & Analyze",
        "document": "Document",
        "upload_files": "Upload PDF, DOCX, TXT, JPG, PNG (тЙд200 MB)",
        "load_sample": "ЁЯУЭ Load sample",
        "sample_tip": "Use sample if you don't have a file handy.",
        "analysis_summary": "ЁЯУС Analysis Summary",
        "ask_questions": "ЁЯТм Ask Questions About This Document",
        "ask_question_doc": "Ask a question about the documentтАж",
        "general_help": "ЁЯзн General",
        "help": "Help",
        "ask_general": "Ask any general questions about",
        "ask_question_general": "Ask any",
        "question": "questionтАж",
        "disclaimer": "тЪая╕П **Disclaimer:**",
        "disclaimer_text": "is an AI tool and may make mistakes. Always consult a qualified",
        "disclaimer_end": "professional for critical matters.",
        "language": "ЁЯМН Language",
        "sector": "ЁЯУК Sector",
        "extracting": "Extracting textтАж",
        "generating": "Generating analysisтАж",
        "thinking": "Thinking...",
        "no_text": "No readable text found in the uploaded file."
    },
    "рд╣рд┐рдВрджреА": {
        "select_language": "ЁЯМН рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "choose_language": "рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "choose_sector": "рдЕрдкрдирд╛ рдХреНрд╖реЗрддреНрд░ рдЪреБрдиреЗрдВ",
        "selected_language": "рдЪрдпрдирд┐рдд рднрд╛рд╖рд╛",
        "legal_docs": "рдХрд╛рдиреВрдиреА рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдФрд░ рдкрд░рд╛рдорд░реНрд╢",
        "medical_reports": "рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд░рд┐рдкреЛрд░реНрдЯ рдФрд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "agro_reports": "рдХреГрд╖рд┐ рд░рд┐рдкреЛрд░реНрдЯ рдФрд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рди",
        "back_language": "тЖР рднрд╛рд╖рд╛ рдЪрдпрди рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ",
        "settings": "тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
        "change_lang_sector": "ЁЯФД рднрд╛рд╖рд╛/рдХреНрд╖реЗрддреНрд░ рдмрджрд▓реЗрдВ",
        "current": "рд╡рд░реНрддрдорд╛рди",
        "upload_analyze": "рдЕрдкрд▓реЛрдб рдФрд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ",
        "document": "рджрд╕реНрддрд╛рд╡реЗрдЬрд╝",
        "upload_files": "PDF, DOCX, TXT, JPG, PNG рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ (тЙд200 MB)",
        "load_sample": "ЁЯУЭ рдирдореВрдирд╛ рд▓реЛрдб рдХрд░реЗрдВ",
        "sample_tip": "рдпрджрд┐ рдЖрдкрдХреЗ рдкрд╛рд╕ рдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рд╣реИ рддреЛ рдирдореВрдирд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "analysis_summary": "ЁЯУС рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╕рд╛рд░рд╛рдВрд╢",
        "ask_questions": "ЁЯТм рдЗрд╕ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
        "ask_question_doc": "рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВтАж",
        "general_help": "ЁЯзн рд╕рд╛рдорд╛рдиреНрдп",
        "help": "рд╕рд╣рд╛рдпрддрд╛",
        "ask_general": "рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреЛрдИ рднреА рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
        "ask_question_general": "рдХреЛрдИ рднреА",
        "question": "рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВтАж",
        "disclaimer": "тЪая╕П **рдЕрд╕реНрд╡реАрдХрд░рдг:**",
        "disclaimer_text": "рдПрдХ AI рдЙрдкрдХрд░рдг рд╣реИ рдФрд░ рдЧрд▓рддрд┐рдпрд╛рдБ рд╣реЛ рд╕рдХрддреА рд╣реИрдВред рд╣рдореЗрд╢рд╛ рдпреЛрдЧреНрдп",
        "disclaimer_end": "рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдорд╛рдорд▓реЛрдВ рдХреЗ рд▓рд┐рдП рд╕рд▓рд╛рд╣ рд▓реЗрдВред",
        "language": "ЁЯМН рднрд╛рд╖рд╛",
        "sector": "ЁЯУК рдХреНрд╖реЗрддреНрд░",
        "extracting": "рдЯреЗрдХреНрд╕реНрдЯ рдирд┐рдХрд╛рд▓рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИтАж",
        "generating": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рддреИрдпрд╛рд░ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИтАж",
        "thinking": "рд╕реЛрдЪ рд░рд╣реЗ рд╣реИрдВ...",
        "no_text": "рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рдлрд╝рд╛рдЗрд▓ рдореЗрдВ рдХреЛрдИ рдкрдардиреАрдп рдЯреЗрдХреНрд╕реНрдЯ рдирд╣реАрдВ рдорд┐рд▓рд╛ред"
    },
    "р░др▒Жр░▓р▒Бр░Чр▒Б": {
        "select_language": "ЁЯМН р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "choose_language": "р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░ор▒А р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░п р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "choose_sector": "р░ор▒А р░░р░Вр░Чр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "selected_language": "р░Ор░Вр░Ър▒Бр░Хр▒Бр░ир▒Нр░и р░нр░╛р░╖",
        "legal_docs": "р░Ър░Яр▒Нр░Яр░кр░░р░ор▒Ир░и р░кр░др▒Нр░░р░╛р░▓р▒Б & р░╕р░▓р░╣р░╛",
        "medical_reports": "р░╡р▒Ир░жр▒Нр░п р░ир░┐р░╡р▒Зр░жр░┐р░Хр░▓р▒Б & р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "agro_reports": "р░╡р▒Нр░пр░╡р░╕р░╛р░п р░ир░┐р░╡р▒Зр░жр░┐р░Хр░▓р▒Б & р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░др▒Нр░╡р░В",
        "back_language": "тЖР р░нр░╛р░╖ р░Ор░Вр░кр░┐р░Хр░Хр▒Б р░др░┐р░░р░┐р░Чр░┐ р░╡р▒Жр░│р▒Нр░│р▒Б",
        "settings": "тЪЩя╕П р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒НтАМр░▓р▒Б",
        "change_lang_sector": "ЁЯФД р░нр░╛р░╖/р░░р░Вр░Чр░В р░ор░╛р░░р▒Нр░Ър▒Б",
        "current": "р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д",
        "upload_analyze": "р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н & р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░Вр░Ър▒Б",
        "document": "р░кр░др▒Нр░░р░В",
        "upload_files": "PDF, DOCX, TXT, JPG, PNG р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐ (тЙд200 MB)",
        "load_sample": "ЁЯУЭ р░ир░ор▒Вр░ир░╛ р░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
        "sample_tip": "р░ор▒А р░╡р░жр▒Нр░ж р░лр▒Ир░▓р▒Н р░▓р▒Зр░Хр░кр▒Лр░др▒З р░ир░ор▒Вр░ир░╛р░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐.",
        "analysis_summary": "ЁЯУС р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░╕р░╛р░░р░╛р░Вр░╢р░В",
        "ask_questions": "ЁЯТм р░И р░кр░др▒Нр░░р░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░Чр░Вр░бр░┐",
        "ask_question_doc": "р░кр░др▒Нр░░р░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐тАж",
        "general_help": "ЁЯзн р░╕р░╛р░зр░╛р░░р░г",
        "help": "р░╕р░╣р░╛р░пр░В",
        "ask_general": "р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Пр░╡р▒Ир░ир░╛ р░╕р░╛р░зр░╛р░░р░г р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░Чр░Вр░бр░┐",
        "ask_question_general": "р░Пр░жр▒Ир░ир░╛",
        "question": "р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐тАж",
        "disclaimer": "тЪая╕П **р░ир░┐р░░р░╛р░Хр░░р░г:**",
        "disclaimer_text": "р░Тр░Х AI р░╕р░╛р░зр░ир░В р░ор░░р░┐р░пр▒Б р░др░кр▒Нр░кр▒Бр░▓р▒Б р░Ьр░░р▒Бр░Чр░╡р░Ър▒Нр░Ър▒Б. р░Ор░▓р▒Нр░▓р░кр▒Нр░кр▒Бр░бр▒В р░Ер░░р▒Нр░╣р░д р░Хр░▓р░┐р░Чр░┐р░и",
        "disclaimer_end": "р░ир░┐р░кр▒Бр░гр▒Бр░бр░┐р░ир░┐ р░Хр▒Ар░▓р░Х р░╡р░┐р░╖р░пр░╛р░▓ р░Хр▒Лр░╕р░В р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐ред",
        "language": "ЁЯМН р░нр░╛р░╖",
        "sector": "ЁЯУК р░░р░Вр░Чр░В",
        "extracting": "р░Яр▒Жр░Хр▒Нр░╕р▒Нр░Яр▒Н р░╡р▒Жр░▓р░┐р░Хр░┐р░др▒Ар░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ВтАж",
        "generating": "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░░р▒Вр░кр▒Кр░Вр░жр░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ВтАж",
        "thinking": "р░Жр░▓р▒Лр░Ър░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░В...",
        "no_text": "р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░╕р░┐р░и р░лр▒Ир░▓р▒НтАМр░▓р▒Л р░Ър░жр░╡р░Чр░▓р░┐р░Чр▒З р░Яр▒Жр░Хр▒Нр░╕р▒Нр░Яр▒Н р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░▓р▒Зр░жр▒Б."
    },
    "╪з╪▒╪п┘И": {
        "select_language": "ЁЯМН ╪з┘╛┘Ж█М ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        "choose_language": "╪м╪з╪▒█М ╪▒┌й┌╛┘Ж█Т ┌й█Т ┘Д█М█Т ╪з┘╛┘Ж█М ┘╛╪│┘Ж╪п█М╪п█Б ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        "choose_sector": "╪з┘╛┘Ж╪з ╪┤╪╣╪и█Б ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        "selected_language": "┘Е┘Ж╪к╪о╪и ┌й╪▒╪п█Б ╪▓╪и╪з┘Ж",
        "legal_docs": "┘В╪з┘Ж┘И┘Ж█М ╪п╪│╪к╪з┘И█М╪▓╪з╪к ╪з┘И╪▒ ┘Е╪┤╪з┘И╪▒╪к",
        "medical_reports": "╪╖╪и█М ╪▒┘╛┘И╪▒┘╣╪│ ╪з┘И╪▒ ╪к╪м╪▓█М█Б",
        "agro_reports": "╪▓╪▒╪╣█М ╪▒┘╛┘И╪▒┘╣╪│ ╪з┘И╪▒ ╪▒█Б┘Ж┘Е╪з╪ж█М",
        "back_language": "тЖР ╪▓╪и╪з┘Ж ┌й█Т ╪з┘Ж╪к╪о╪з╪и ┘╛╪▒ ┘И╪з┘╛╪│ ╪м╪з╪ж█М┌║",
        "settings": "тЪЩя╕П ╪к╪▒╪к█М╪и╪з╪к",
        "change_lang_sector": "ЁЯФД ╪▓╪и╪з┘Ж/╪┤╪╣╪и█Б ╪к╪и╪п█М┘Д ┌й╪▒█М┌║",
        "current": "┘Е┘И╪м┘И╪п█Б",
        "upload_analyze": "╪з┘╛ ┘Д┘И┌И ╪з┘И╪▒ ╪к╪м╪▓█М█Б ┌й╪▒█М┌║",
        "document": "╪п╪│╪к╪з┘И█М╪▓",
        "upload_files": "PDF, DOCX, TXT, JPG, PNG ╪з┘╛ ┘Д┘И┌И ┌й╪▒█М┌║ (тЙд200 MB)",
        "load_sample": "ЁЯУЭ ┘Ж┘Е┘И┘Ж█Б ┘Д┘И┌И ┌й╪▒█М┌║",
        "sample_tip": "╪з┌п╪▒ ╪в┘╛ ┌й█Т ┘╛╪з╪│ ┘Б╪з╪ж┘Д ┘Ж█Б█М┌║ █Б█Т ╪к┘И ┘Ж┘Е┘И┘Ж█Б ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒█М┌║█Ф",
        "analysis_summary": "ЁЯУС ╪к╪м╪▓█М█Б ╪о┘Д╪з╪╡█Б",
        "ask_questions": "ЁЯТм ╪з╪│ ╪п╪│╪к╪з┘И█М╪▓ ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ╪│┘И╪з┘Д╪з╪к ┘╛┘И┌Ж┌╛█М┌║",
        "ask_question_doc": "╪п╪│╪к╪з┘И█М╪▓ ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ╪│┘И╪з┘Д ┘╛┘И┌Ж┌╛█М┌║тАж",
        "general_help": "ЁЯзн ╪╣╪з┘Е",
        "help": "┘Е╪п╪п",
        "ask_general": "┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ┌й┘И╪ж█М ╪и┌╛█М ╪╣╪з┘Е ╪│┘И╪з┘Д╪з╪к ┘╛┘И┌Ж┌╛█М┌║",
        "ask_question_general": "┌й┘И╪ж█М ╪и┌╛█М",
        "question": "╪│┘И╪з┘Д ┘╛┘И┌Ж┌╛█М┌║тАж",
        "disclaimer": "тЪая╕П **╪п╪│╪к╪и╪▒╪п╪з╪▒█М:**",
        "disclaimer_text": "╪з█М┌й AI ┘╣┘И┘Д █Б█Т ╪з┘И╪▒ ╪║┘Д╪╖█М╪з┌║ █Б┘И ╪│┌й╪к█М █Б█М┌║█Ф █Б┘Е█М╪┤█Б ╪з█Б┘Д",
        "disclaimer_end": "┘╛█М╪┤█Б ┘И╪▒ ╪│█Т ╪з█Б┘Е ┘Е╪╣╪з┘Е┘Д╪з╪к ┌й█Т ┘Д█М█Т ┘Е╪┤┘И╪▒█Б ┘Д█М┌║█Ф",
        "language": "ЁЯМН ╪▓╪и╪з┘Ж",
        "sector": "ЁЯУК ╪┤╪╣╪и█Б",
        "extracting": "┘╣█М┌й╪│┘╣ ┘Ж┌й╪з┘Д╪з ╪м╪з ╪▒█Б╪з █Б█ТтАж",
        "generating": "╪к╪м╪▓█М█Б ╪к█М╪з╪▒ ┌й█М╪з ╪м╪з ╪▒█Б╪з █Б█ТтАж",
        "thinking": "╪│┘И┌Ж ╪▒█Б█Т █Б█М┌║...",
        "no_text": "╪з┘╛ ┘Д┘И┌И ╪┤╪п█Б ┘Б╪з╪ж┘Д ┘Е█М┌║ ┘╛┌С┌╛┘Ж█Т ┌й█Т ┘В╪з╪и┘Д ┘╣█М┌й╪│┘╣ ┘Ж█Б█М┌║ ┘Е┘Д╪з█Ф"
    }
}

def get_text(key):
    """Get translated text based on selected language"""
    lang = st.session_state.get("selected_language", "English")
    return UI_TRANSLATIONS.get(lang, UI_TRANSLATIONS["English"]).get(key, key)

def pick_language(user_text: str) -> str:
    pref = st.session_state.get("selected_language", "English")
    return pref

def pick_tts_code(lang_name: str) -> str:
    return LANG_CODE_MAP_TTS.get(lang_name, "en")

def pick_ocr_code() -> str:
    pref = st.session_state.get("selected_language", "English")
    return LANG_CODE_MAP_OCR.get(pref, "eng")

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# AI FUNCTIONS (UPDATED FOR SECTOR RESTRICTION)
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def get_sector_prompt(sector, mode="summary"):
    prompts = {
        "Law": {
            "summary": "You are LawLens тЪЦя╕П, a legal document explainer. ONLY analyze legal documents, contracts, agreements, laws, regulations, court cases, and legal matters.",
            "chat": "You are LawLens тЪЦя╕П, a legal assistant. ONLY answer questions about legal documents, legal terms, laws, regulations, and legal procedures.",
            "general": "You are LawLens тЪЦя╕П, a legal guide. ONLY provide legal information, legal advice, law explanations, legal procedures, and legal guidance."
        },
        "Medical": {
            "summary": "You are MedLens ЁЯПе, a medical document explainer. ONLY analyze medical reports, test results, prescriptions, medical records, health documents, and medical matters.",
            "chat": "You are MedLens ЁЯПе, a medical assistant. ONLY answer questions about medical documents, medical terminology, health conditions, treatments, and medical procedures.",
            "general": "You are MedLens ЁЯПе, a medical guide. ONLY provide medical information, health advice, medical explanations, disease information, and health guidance."
        },
        "Agriculture": {
            "summary": "You are AgroLens ЁЯМ╛, an agricultural document explainer. ONLY analyze agricultural reports, soil tests, crop data, farming documents, weather reports, and agricultural matters.",
            "chat": "You are AgroLens ЁЯМ╛, an agricultural assistant. ONLY answer questions about farming documents, agricultural terms, crops, soil, weather, and farming procedures.",
            "general": "You are AgroLens ЁЯМ╛, an agricultural guide. ONLY provide farming information, agricultural advice, crop guidance, soil management, and farming techniques."
        }
    }
    return prompts.get(sector, prompts["Law"]).get(mode, prompts["Law"]["summary"])

def ask_ai(document_text=None, query=None, mode="summary"):
    sector = st.session_state.selected_sector
    language = st.session_state.selected_language
    
    # Check for critical medical keywords across all sectors
    critical_medical_keywords = [
        # English
        "emergency", "urgent", "critical", "severe", "chest pain", "heart attack", 
        "stroke", "bleeding", "unconscious", "poisoning", "overdose", "suicide",
        "difficulty breathing", "allergic reaction", "seizure", "trauma", "fracture",
        "high fever", "blood pressure", "diabetes", "insulin", "medication error",
        "swelling", "rash", "infection", "wound", "burn", "accident", "injury",
        
        # Hindi
        "рдЖрдкрд╛рддрдХрд╛рд▓", "рддрддреНрдХрд╛рд▓", "рдЧрдВрднреАрд░", "рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж", "рджрд┐рд▓ рдХрд╛ рджреМрд░рд╛", "рдЦреВрди рдмрд╣рдирд╛",
        "рдмреЗрд╣реЛрд╢", "рдЬрд╣рд░", "рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ", "рдПрд▓рд░реНрдЬреА", "рдмреБрдЦрд╛рд░", "рд░рдХреНрддрдЪрд╛рдк", "рдордзреБрдореЗрд╣",
        "рд╕реВрдЬрди", "рд╕рдВрдХреНрд░рдордг", "рдШрд╛рд╡", "рдЬрд▓рдирд╛", "рдЪреЛрдЯ",
        
        # Telugu
        "р░Ер░др▒Нр░пр░╡р░╕р░░", "р░др░Хр▒Нр░╖р░г", "р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и", "р░Ыр░╛р░др▒А р░ир▒Кр░кр▒Нр░кр░┐", "р░Чр▒Бр░Вр░бр▒Жр░кр▒Лр░Яр▒Б", "р░░р░Хр▒Нр░др░╕р▒Нр░░р░╛р░╡р░В",
        "р░Ер░кр░╕р▒Нр░ор░╛р░░р░Х", "р░╡р░┐р░╖р░В", "р░╢р▒Нр░╡р░╛р░╕ р░др▒Ар░╕р▒Бр░Хр▒Лр░╡р░бр░Вр░▓р▒Л р░Зр░мр▒Нр░мр░Вр░жр░┐", "р░Ер░▓р▒Жр░░р▒Нр░Ьр▒А", "р░Ьр▒Нр░╡р░░р░В", "р░░р░Хр▒Нр░др░кр▒Лр░Яр▒Б",
        "р░ор░зр▒Бр░ор▒Зр░╣р░В", "р░╡р░╛р░кр▒Б", "р░Зр░ир▒Нр░лр▒Жр░Хр▒Нр░╖р░ир▒Н", "р░Чр░╛р░пр░В", "р░Хр░╛р░▓р░┐р░и р░Чр░╛р░пр░В", "р░жр▒Жр░мр▒Нр░м",
        
        # Urdu
        "█Б┘Ж┌п╪з┘Е█М", "┘Б┘И╪▒█М", "╪┤╪п█М╪п", "╪│█М┘Ж█Т ┘Е█М┌║ ╪п╪▒╪п", "╪п┘Д ┌й╪з ╪п┘И╪▒█Б", "╪о┘И┘Ж ╪и█Б┘Ж╪з",
        "╪и█Т █Б┘И╪┤", "╪▓█Б╪▒", "╪│╪з┘Ж╪│ ┘Д█М┘Ж█Т ┘Е█М┌║ ╪п╪┤┘И╪з╪▒█М", "╪з┘Д╪▒╪м█М", "╪и╪о╪з╪▒", "╪и┘Д┌И ┘╛╪▒█М╪┤╪▒",
        "╪░█М╪з╪и█М╪╖╪│", "╪│┘И╪м┘Ж", "╪з┘Ж┘Б█М┌й╪┤┘Ж", "╪▓╪о┘Е", "╪м┘Д┘Ж╪з", "┌Ж┘И┘╣"
    ]
    
    # Check if query contains critical medical terms
    is_medical_emergency = False
    if query:
        query_lower = query.lower()
        is_medical_emergency = any(keyword.lower() in query_lower for keyword in critical_medical_keywords)
    
    # If it's a medical emergency, override sector restrictions
    if is_medical_emergency and sector != "Medical":
        emergency_prompt = f"""
        ЁЯЪи MEDICAL EMERGENCY OVERRIDE ЁЯЪи
        
        You are now temporarily acting as MedLens ЁЯПе because this appears to be a critical medical query that could involve immediate harm.
        
        RESPOND IMMEDIATELY in {language} with:
        1. **EMERGENCY WARNING**: If this is a life-threatening situation, contact emergency services immediately
        2. **BASIC GUIDANCE**: Provide essential first aid or immediate steps
        3. **SEEK PROFESSIONAL HELP**: Strongly advise to consult medical professionals
        4. **DISCLAIMER**: Emphasize this is emergency guidance only, not professional medical advice
        
        User's critical medical query: {query}
        Document context (if any): {document_text or "No document provided"}
        
        Respond with urgency and care, prioritizing user safety.
        """
        
        response = model.generate_content(
            emergency_prompt,
            generation_config={
                "temperature": 0.3,  # Lower temperature for more precise emergency response
                "max_output_tokens": 1000
            }
        )
        
        # Add emergency warning header
        emergency_response = f"""
        ЁЯЪи **MEDICAL EMERGENCY RESPONSE** ЁЯЪи
        *(Sector restriction overridden for potential medical emergency)*
        
        {response.text}
        
        тЪая╕П **CRITICAL**: If this is a life-threatening emergency, contact emergency services (108/102 in India, 911 in US, etc.) IMMEDIATELY.
        """
        
        return emergency_response
    
    # Regular sector-specific responses
    if sector != "Medical":
        sector_restriction = f"""
        CRITICAL: You MUST only provide {sector.lower()}-related information. 
        - If the user asks about other topics (law, medicine, agriculture) outside your {sector.lower()} specialty, respond: "рдореБрдЭреЗ рдЦреБрд╢реА рд╣реЛрдЧреА рдХрд┐ рдореИрдВ рдХреЗрд╡рд▓ {sector.lower()} рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдкреНрд░рд╢реНрдиреЛрдВ рдХрд╛ рдЙрддреНрддрд░ рджреЗ рд╕рдХреВрдВред рдХреГрдкрдпрд╛ рдЕрдиреНрдп рд╡рд┐рд╖рдпреЛрдВ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╕реЗрдХреНрд╢рди рдореЗрдВ рдЬрд╛рдПрдВред" (in the selected language)
        - REFUSE to answer non-{sector.lower()} questions completely.
        - Stay strictly within {sector.lower()} domain.
        - EXCEPTION: If you detect a potential medical emergency, you may provide basic safety guidance.
        """
    else:
        sector_restriction = f"You are in the Medical sector. Provide comprehensive medical guidance and information."
    
    lang_clause = f"Respond ONLY in {language}. All text, labels, headings, and content must be completely in {language}. Do not mix languages."
    base_prompt = get_sector_prompt(sector, mode)
    
    if mode == "summary":
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}

Analyze this {sector.lower()} document in {language}:
- Provide summary completely in {language}
- Key findings/obligations in {language} 
- Important dates/recommendations in {language}
- Risk factors/indicators in {language}
- All headings and labels in {language}

Document:
{document_text}
"""
    elif mode == "chat":
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}

Document context:
{document_text}

User question: {query}

IMPORTANT: 
1. Only answer if this question is related to {sector.lower()}
2. If not related to {sector.lower()}, respond in {language}: "I can only help with {sector.lower()}-related questions about your document."
3. Answer completely in {language}
4. EXCEPTION: For potential medical emergencies, provide basic safety guidance regardless of sector.
"""
    else:
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}

User question: {query}

IMPORTANT: 
1. Only answer {sector.lower()}-related questions
2. If question is about other topics, respond in {language}: "I specialize only in {sector.lower()}. Please switch to the appropriate sector for other topics."
3. Provide answer completely in {language}
4. EXCEPTION: For potential medical emergencies, provide basic safety guidance regardless of sector.
"""

    response = model.generate_content(
        prompt,
        generation_config={
            "temperature": 0.7,
            "max_output_tokens": 800
        }
    )
    return response.text

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# TTS FUNCTIONS
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def clean_text(text: str) -> str:
    emoji_pattern = re.compile(
        "["
        u"\U0001F600-\U0001F64F"
        u"\U0001F300-\U0001F5FF"
        u"\U0001F680-\U0001F6FF"
        u"\U0001F1E0-\U0001F1FF"
        u"\U00002700-\U000027BF"
        u"\U0001F900-\U0001F9FF"
        u"\U00002600-\U000026FF"
        u"\U00002B00-\U00002BFF"
        "]+", flags=re.UNICODE
    )
    text = emoji_pattern.sub(r'', text)
    text = re.sub(r'(\*\*|__|\*|_|#+)', '', text)
    return text.strip()

def tts_speak_toggle(text: str, lang_name: str):
    safe_text = clean_text(text)
    lang_code = pick_tts_code(lang_name)
    
    try:
        tts = gTTS(text=safe_text, lang=lang_code, slow=False)
        audio_buffer = io.BytesIO()
        tts.write_to_fp(audio_buffer)
        audio_buffer.seek(0)
        st.audio(audio_buffer.getvalue(), format='audio/mp3')
    except Exception as e:
        st.error(f"TTS generation failed: {e}")

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# OCR FUNCTIONS
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
@st.cache_data(show_spinner=False, ttl=3600)
def ocr_image_bytes(img_bytes: bytes, lang_code: str) -> str:
    try:
        img = Image.open(io.BytesIO(img_bytes))
        txt = pytesseract.image_to_string(img, lang=lang_code).strip()
        return txt
    except Exception as e:
        return f"__OCR_ERROR__ {e}"

def preprocess_pil(img: Image.Image) -> Image.Image:
    if img.mode != "RGB":
        img = img.convert("RGB")
    return img

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# TEXT EXTRACTION FUNCTIONS
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def extract_text_from_pdf(uploaded_file) -> str:
    try:
        uploaded_file.seek(0)
        pdf = PyPDF2.PdfReader(uploaded_file)
        txt = "\n".join((p.extract_text() or "") for p in pdf.pages).strip()
        if len(txt) > 20:
            return txt
    except Exception as e:
        st.warning(f"PyPDF2 failed: {e}")

    lang_code = pick_ocr_code()
    try:
        uploaded_file.seek(0)
        import pdf2image
        images = pdf2image.convert_from_bytes(uploaded_file.read(), dpi=300, first_page=1, last_page=10)
        out = []
        bar = st.progress(0.0)
        for i, im in enumerate(images, 1):
            im = preprocess_pil(im)
            buf = io.BytesIO()
            im.save(buf, format="PNG")
            page_bytes = buf.getvalue()
            text = ocr_image_bytes(page_bytes, lang_code)
            if not text.startswith("__OCR_ERROR__"):
                out.append(text)
            bar.progress(i/len(images))
        bar.empty()
        combined = "\n".join(out).strip()
        if combined:
            return combined
    except Exception as e:
        st.info(f"pdf2image/OCR skipped: {e}")

    st.error("тЭМ Could not extract readable text from this PDF.")
    return ""

def extract_text_from_docx(f):
    try:
        return "\n".join(p.text for p in docx.Document(f).paragraphs).strip()
    except Exception as e:
        st.error(f"DOCX read error: {e}")
        return ""

def extract_text_from_image(f):
    try:
        img = Image.open(f)
        img = preprocess_pil(img)
        buf = io.BytesIO()
        img.save(buf, format="PNG")
        lang_code = pick_ocr_code()
        txt = ocr_image_bytes(buf.getvalue(), lang_code)
        if txt and not txt.startswith("__OCR_ERROR__"):
            return txt
        if txt.startswith("__OCR_ERROR__"):
            st.error(txt.replace("__OCR_ERROR__", "OCR error:"))
    except Exception as e:
        st.error(f"OCR image error: {e}")
    return ""

def extract_text(file):
    if not file:
        return ""
    ext = file.name.lower().split(".")[-1]
    if ext == "pdf":
        return extract_text_from_pdf(file)
    elif ext == "docx":
        return extract_text_from_docx(file)
    elif ext in ("jpg", "jpeg", "png"):
        return extract_text_from_image(file)
    elif ext == "txt":
        return file.read().decode("utf-8", errors="ignore")
    else:
        st.error("Unsupported file type")
        return ""

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# LANGUAGE SELECTION PAGE
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def show_language_selection():
    st.markdown("<h1 style='text-align: center; color: #1f77b4;'>ЁЯМН Select Your Language</h1>", unsafe_allow_html=True)
    st.markdown("<p style='text-align: center; font-size: 18px; margin-bottom: 40px;'>Choose your preferred language to continue</p>", unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button(f"{LANGUAGES['English']} English", key="eng", use_container_width=True, help="Select English"):
            st.session_state.selected_language = "English"
            st.session_state.language_selected = True
            st.rerun()
            
        if st.button(f"{LANGUAGES['р░др▒Жр░▓р▒Бр░Чр▒Б']} р░др▒Жр░▓р▒Бр░Чр▒Б", key="tel", use_container_width=True, help="Select Telugu"):
            st.session_state.selected_language = "р░др▒Жр░▓р▒Бр░Чр▒Б"
            st.session_state.language_selected = True
            st.rerun()
    
    with col2:
        if st.button(f"{LANGUAGES['рд╣рд┐рдВрджреА']} рд╣рд┐рдВрджреА", key="hin", use_container_width=True, help="Select Hindi"):
            st.session_state.selected_language = "рд╣рд┐рдВрджреА"
            st.session_state.language_selected = True
            st.rerun()
            
        if st.button(f"{LANGUAGES['╪з╪▒╪п┘И']} ╪з╪▒╪п┘И", key="urd", use_container_width=True, help="Select Urdu"):
            st.session_state.selected_language = "╪з╪▒╪п┘И"
            st.session_state.language_selected = True
            st.rerun()

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# SECTOR SELECTION PAGE
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def show_sector_selection():
    st.markdown(f"<h1 style='text-align: center; color: #1f77b4;'>{get_text('choose_sector')}</h1>", unsafe_allow_html=True)
    st.markdown(f"<p style='text-align: center; font-size: 18px; margin-bottom: 40px;'>{get_text('selected_language')}: {LANGUAGES[st.session_state.selected_language]} {st.session_state.selected_language}</p>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("<div style='text-align: center; font-size: 64px; margin: 20px 0;'>тЪЦя╕П</div>", unsafe_allow_html=True)
        if st.button("Law", key="law_btn", use_container_width=True, help="Legal document analysis"):
            st.session_state.selected_sector = "Law"
            st.session_state.sector_selected = True
            st.rerun()
        st.markdown(f"<p style='text-align: center; font-size: 14px; color: #666;'>{get_text('legal_docs')}</p>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("<div style='text-align: center; font-size: 64px; margin: 20px 0;'>ЁЯПе</div>", unsafe_allow_html=True)
        if st.button("Medical", key="med_btn", use_container_width=True, help="Medical document analysis"):
            st.session_state.selected_sector = "Medical"
            st.session_state.sector_selected = True
            st.rerun()
        st.markdown(f"<p style='text-align: center; font-size: 14px; color: #666;'>{get_text('medical_reports')}</p>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("<div style='text-align: center; font-size: 64px; margin: 20px 0;'>ЁЯМ╛</div>", unsafe_allow_html=True)
        if st.button("Agriculture", key="agr_btn", use_container_width=True, help="Agricultural document analysis"):
            st.session_state.selected_sector = "Agriculture"
            st.session_state.sector_selected = True
            st.rerun()
        st.markdown(f"<p style='text-align: center; font-size: 14px; color: #666;'>{get_text('agro_reports')}</p>", unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button(get_text("back_language"), use_container_width=True):
        st.session_state.language_selected = False
        st.session_state.selected_language = ""
        st.rerun()

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# MAIN APPLICATION
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def show_main_app():
    sector_info = SECTORS[st.session_state.selected_sector]
    st.title(f"{sector_info['emoji']} {st.session_state.selected_sector}Lens тАУ {get_text('upload_analyze')} & Chat")
    
    # Language indicator
    st.info(f"{get_text('language')}: {LANGUAGES[st.session_state.selected_language]} {st.session_state.selected_language} | {get_text('sector')}: {sector_info['emoji']} {st.session_state.selected_sector}")
    
    # Settings in sidebar
    with st.sidebar:
        st.subheader(get_text("settings"))
        if st.button(get_text("change_lang_sector"), use_container_width=True):
            # Reset all states - FIXED
            st.session_state.language_selected = False
            st.session_state.sector_selected = False
            st.session_state.selected_language = ""
            st.session_state.selected_sector = ""
            st.session_state.doc_text = ""
            st.session_state.summary = ""
            st.session_state.chat_history = []        # тЬЕ Must be list
            st.session_state.general_messages = []    # тЬЕ Must be list
            st.rerun()
        
        st.markdown("---")
        st.caption(f"{get_text('current')}: {st.session_state.selected_language} тЖТ {st.session_state.selected_sector}")
    
    # Main tabs
    tab_doc, tab_gen = st.tabs([f"ЁЯУД {st.session_state.selected_sector} {get_text('upload_analyze')}", f"{get_text('general_help')} {st.session_state.selected_sector} {get_text('help')}"])
    
    with tab_doc:
        st.header(f"ЁЯУД {get_text('upload_analyze')} {st.session_state.selected_sector} {get_text('document')}")
        up = st.file_uploader(
            get_text("upload_files"),
            type=["pdf", "docx", "txt", "jpg", "jpeg", "png"]
        )
        
        # Sample button
        colA, colB = st.columns(2)
        with colA:
            sample_btn = st.button(f"{get_text('load_sample')} {st.session_state.selected_sector.lower()} {get_text('document')}")
        with colB:
            st.caption(get_text("sample_tip"))
        
        # Sample text based on sector
        if sample_btn and not up:
            samples = {
                "Law": "Service Agreement between Alpha Pvt Ltd and Beta Traders. Parties agree to monthly deliveries by the 5th. Late delivery incurs 2% of invoice per week. Either party may terminate with 30 days notice. Disputes: Hyderabad jurisdiction.",
                "Medical": "Patient: John Doe. Blood Pressure: 140/90 mmHg (elevated). Glucose: 180 mg/dL (high). Cholesterol: 250 mg/dL. Recommendation: Start antihypertensive medication. Follow low-sodium diet. Recheck in 4 weeks.",
                "Agriculture": "Soil Report - Field A: pH 6.8, Nitrogen 45 ppm (low), Phosphorus 25 ppm (adequate), Potassium 180 ppm (high). Crop: Wheat. Recommendation: Apply 120 kg/ha Urea. Expected yield: 4.2 tons/ha. Next soil test: 6 months."
            }
            st.session_state.doc_text = samples[st.session_state.selected_sector]
            with st.spinner(get_text("generating")):
                st.session_state.summary = ask_ai(document_text=st.session_state.doc_text, mode="summary")
        
        if up:
            with st.spinner(get_text("extracting")):
                text = extract_text(up)
            if text:
                st.session_state.doc_text = text
                with st.spinner(get_text("generating")):
                    st.session_state.summary = ask_ai(document_text=text, mode="summary")
            else:
                st.warning(get_text("no_text"))
        
        if st.session_state.summary:
            st.subheader(get_text("analysis_summary"))
            st.write(st.session_state.summary)
            tts_speak_toggle(st.session_state.summary, st.session_state.selected_language)
            
            st.divider()
            st.subheader(get_text("ask_questions"))
            
            # Chat history
            for m in st.session_state.chat_history:
                with st.chat_message(m["role"]):
                    st.markdown(m["content"])
                    if m["role"] == "assistant":
                        tts_speak_toggle(m["content"], st.session_state.selected_language)
            
            # Chat input
            q = st.chat_input(get_text("ask_question_doc"))
            if q:
                st.session_state.chat_history.append({"role": "user", "content": q})
                with st.spinner(get_text("thinking")):
                    ans = ask_ai(document_text=st.session_state.doc_text, query=q, mode="chat")
                st.session_state.chat_history.append({"role": "assistant", "content": ans})
                st.rerun()
    
    with tab_gen:
        st.header(f"{get_text('general_help')} {st.session_state.selected_sector} {get_text('help')}")
        st.caption(f"{get_text('ask_general')} {st.session_state.selected_sector.lower()}")
        
        # General chat history
        for m in st.session_state.general_messages:
            with st.chat_message(m["role"]):
                st.markdown(m["content"])
                if m["role"] == "assistant":
                    tts_speak_toggle(m["content"], st.session_state.selected_language)
        
        # General chat input
        q2 = st.chat_input(f"{get_text('ask_question_general')} {st.session_state.selected_sector.lower()} {get_text('question')}")
        if q2:
            st.session_state.general_messages.append({"role": "user", "content": q2})
            with st.spinner(get_text("thinking")):
                ans2 = ask_ai(query=q2, mode="general")
            st.session_state.general_messages.append({"role": "assistant", "content": ans2})
            st.rerun()
    
    # Disclaimer
    st.markdown(f"""---
{get_text("disclaimer")} {st.session_state.selected_sector}Lens {get_text("disclaimer_text")} {st.session_state.selected_sector.lower()} {get_text("disclaimer_end")}
""")

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# MAIN APP LOGIC
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def main():
    if not st.session_state.language_selected:
        show_language_selection()
    elif not st.session_state.sector_selected:
        show_sector_selection()
    else:
        show_main_app()

if __name__ == "__main__":
    main()
# -------------------------------------------------
# Multi-Sector Document Analysis App (app.py)
# -------------------------------------------------
import os, io, re, time, html, hashlib
from dotenv import load_dotenv

load_dotenv()

import streamlit as st
import PyPDF2, docx
from PIL import Image
import pytesseract
from langdetect import detect
import google.generativeai as genai
from gtts import gTTS

API_KEY = os.getenv("GEMINI_KEY")
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-2.5-flash-lite")

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# CONFIG & SESSION STATE
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
OCR_API_KEY = os.getenv("OCR_API_KEY")

pytesseract.pytesseract.tesseract_cmd = os.getenv(
    "TESSERACT_PATH",
    r"C:\Program Files\Tesseract-OCR\tesseract.exe"
)

st.set_page_config(page_title="Document Analysis Hub", page_icon="ЁЯФН", layout="centered")

# Global style
st.markdown("""
<style>
html, body, [class*="css"] {
  font-family: "Noto Sans", "Noto Sans Telugu", "Noto Sans Devanagari", system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Color Emoji", "Apple Color Emoji", "Segoe UI Emoji", sans-serif;
}
.big-button {
    font-size: 20px !important;
    padding: 20px !important;
    margin: 10px 0 !important;
    text-align: center !important;
    border-radius: 10px !important;
}
.sector-button {
    font-size: 48px !important;
    padding: 30px !important;
    margin: 15px !important;
    text-align: center !important;
    border-radius: 15px !important;
}
</style>
""", unsafe_allow_html=True)

# Initialize session state
DEFAULT_STATE = {
    "language_selected": False,
    "sector_selected": False,
    "selected_language": "",
    "selected_sector": "",
    "doc_text": "",
    "summary": "",
    "chat_history": [],
    "general_messages": [],
    "resp_lang": "Auto (match user)",
    "ocr_lang": "Auto",
    "last_user_input": ""
}

for k, v in DEFAULT_STATE.items():
    st.session_state.setdefault(k, v)

# Language and sector configurations
LANGUAGES = {
    "English": "ЁЯЗ║ЁЯЗ╕",
    "рд╣рд┐рдВрджреА": "ЁЯЗоЁЯЗ│", 
    "р░др▒Жр░▓р▒Бр░Чр▒Б": "ЁЯЗоЁЯЗ│",
    "╪з╪▒╪п┘И": "ЁЯЗ╡ЁЯЗ░"
}

SECTORS = {
    "Law": {"emoji": "тЪЦя╕П", "symbol": "┬з"},
    "Medical": {"emoji": "ЁЯПе", "symbol": "+"},
    "Agriculture": {"emoji": "ЁЯМ╛", "symbol": "ЁЯЪЬ"}
}

LANG_CODE_MAP_TTS = {"English": "en", "рд╣рд┐рдВрджреА": "hi", "р░др▒Жр░▓р▒Бр░Чр▒Б": "te", "╪з╪▒╪п┘И": "ur"}
LANG_CODE_MAP_OCR = {"English": "eng", "рд╣рд┐рдВрджреА": "hin", "р░др▒Жр░▓р▒Бр░Чр▒Б": "tel", "╪з╪▒╪п┘И": "urd"}

# UI Translations
UI_TRANSLATIONS = {
    "English": {
        "select_language": "ЁЯМН Select Your Language",
        "choose_language": "Choose your preferred language to continue",
        "choose_sector": "Choose Your Sector",
        "selected_language": "Selected Language",
        "legal_docs": "Legal documents & consultation",
        "medical_reports": "Medical reports & analysis", 
        "agro_reports": "Agricultural reports & guidance",
        "back_language": "тЖР Back to Language Selection",
        "settings": "тЪЩя╕П Settings",
        "change_lang_sector": "ЁЯФД Change Language/Sector",
        "current": "Current",
        "upload_analyze": "Upload & Analyze",
        "document": "Document",
        "upload_files": "Upload PDF, DOCX, TXT, JPG, PNG (тЙд200 MB)",
        "load_sample": "ЁЯУЭ Load sample",
        "sample_tip": "Use sample if you don't have a file handy.",
        "analysis_summary": "ЁЯУС Analysis Summary",
        "ask_questions": "ЁЯТм Ask Questions About This Document",
        "ask_question_doc": "Ask a question about the documentтАж",
        "general_help": "ЁЯзн General",
        "help": "Help",
        "ask_general": "Ask any general questions about",
        "ask_question_general": "Ask any",
        "question": "questionтАж",
        "disclaimer": "тЪая╕П **Disclaimer:**",
        "disclaimer_text": "is an AI tool and may make mistakes. Always consult a qualified",
        "disclaimer_end": "professional for critical matters.",
        "language": "ЁЯМН Language",
        "sector": "ЁЯУК Sector",
        "extracting": "Extracting textтАж",
        "generating": "Generating analysisтАж",
        "thinking": "Thinking...",
        "no_text": "No readable text found in the uploaded file."
    },
    "рд╣рд┐рдВрджреА": {
        "select_language": "ЁЯМН рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "choose_language": "рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "choose_sector": "рдЕрдкрдирд╛ рдХреНрд╖реЗрддреНрд░ рдЪреБрдиреЗрдВ",
        "selected_language": "рдЪрдпрдирд┐рдд рднрд╛рд╖рд╛",
        "legal_docs": "рдХрд╛рдиреВрдиреА рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдФрд░ рдкрд░рд╛рдорд░реНрд╢",
        "medical_reports": "рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд░рд┐рдкреЛрд░реНрдЯ рдФрд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "agro_reports": "рдХреГрд╖рд┐ рд░рд┐рдкреЛрд░реНрдЯ рдФрд░ рдорд╛рд░реНрдЧрджрд░реНрд╢рди",
        "back_language": "тЖР рднрд╛рд╖рд╛ рдЪрдпрди рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ",
        "settings": "тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
        "change_lang_sector": "ЁЯФД рднрд╛рд╖рд╛/рдХреНрд╖реЗрддреНрд░ рдмрджрд▓реЗрдВ",
        "current": "рд╡рд░реНрддрдорд╛рди",
        "upload_analyze": "рдЕрдкрд▓реЛрдб рдФрд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ",
        "document": "рджрд╕реНрддрд╛рд╡реЗрдЬрд╝",
        "upload_files": "PDF, DOCX, TXT, JPG, PNG рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ (тЙд200 MB)",
        "load_sample": "ЁЯУЭ рдирдореВрдирд╛ рд▓реЛрдб рдХрд░реЗрдВ",
        "sample_tip": "рдпрджрд┐ рдЖрдкрдХреЗ рдкрд╛рд╕ рдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рд╣реИ рддреЛ рдирдореВрдирд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "analysis_summary": "ЁЯУС рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╕рд╛рд░рд╛рдВрд╢",
        "ask_questions": "ЁЯТм рдЗрд╕ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
        "ask_question_doc": "рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВтАж",
        "general_help": "ЁЯзн рд╕рд╛рдорд╛рдиреНрдп",
        "help": "рд╕рд╣рд╛рдпрддрд╛",
        "ask_general": "рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреЛрдИ рднреА рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
        "ask_question_general": "рдХреЛрдИ рднреА",
        "question": "рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВтАж",
        "disclaimer": "тЪая╕П **рдЕрд╕реНрд╡реАрдХрд░рдг:**",
        "disclaimer_text": "рдПрдХ AI рдЙрдкрдХрд░рдг рд╣реИ рдФрд░ рдЧрд▓рддрд┐рдпрд╛рдБ рд╣реЛ рд╕рдХрддреА рд╣реИрдВред рд╣рдореЗрд╢рд╛ рдпреЛрдЧреНрдп",
        "disclaimer_end": "рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдорд╛рдорд▓реЛрдВ рдХреЗ рд▓рд┐рдП рд╕рд▓рд╛рд╣ рд▓реЗрдВред",
        "language": "ЁЯМН рднрд╛рд╖рд╛",
        "sector": "ЁЯУК рдХреНрд╖реЗрддреНрд░",
        "extracting": "рдЯреЗрдХреНрд╕реНрдЯ рдирд┐рдХрд╛рд▓рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИтАж",
        "generating": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рддреИрдпрд╛рд░ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИтАж",
        "thinking": "рд╕реЛрдЪ рд░рд╣реЗ рд╣реИрдВ...",
        "no_text": "рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рдлрд╝рд╛рдЗрд▓ рдореЗрдВ рдХреЛрдИ рдкрдардиреАрдп рдЯреЗрдХреНрд╕реНрдЯ рдирд╣реАрдВ рдорд┐рд▓рд╛ред"
    },
    "р░др▒Жр░▓р▒Бр░Чр▒Б": {
        "select_language": "ЁЯМН р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "choose_language": "р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░ор▒А р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░п р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "choose_sector": "р░ор▒А р░░р░Вр░Чр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "selected_language": "р░Ор░Вр░Ър▒Бр░Хр▒Бр░ир▒Нр░и р░нр░╛р░╖",
        "legal_docs": "р░Ър░Яр▒Нр░Яр░кр░░р░ор▒Ир░и р░кр░др▒Нр░░р░╛р░▓р▒Б & р░╕р░▓р░╣р░╛",
        "medical_reports": "р░╡р▒Ир░жр▒Нр░п р░ир░┐р░╡р▒Зр░жр░┐р░Хр░▓р▒Б & р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "agro_reports": "р░╡р▒Нр░пр░╡р░╕р░╛р░п р░ир░┐р░╡р▒Зр░жр░┐р░Хр░▓р▒Б & р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░др▒Нр░╡р░В",
        "back_language": "тЖР р░нр░╛р░╖ р░Ор░Вр░кр░┐р░Хр░Хр▒Б р░др░┐р░░р░┐р░Чр░┐ р░╡р▒Жр░│р▒Нр░│р▒Б",
        "settings": "тЪЩя╕П р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒НтАМр░▓р▒Б",
        "change_lang_sector": "ЁЯФД р░нр░╛р░╖/р░░р░Вр░Чр░В р░ор░╛р░░р▒Нр░Ър▒Б",
        "current": "р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д",
        "upload_analyze": "р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н & р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░Вр░Ър▒Б",
        "document": "р░кр░др▒Нр░░р░В",
        "upload_files": "PDF, DOCX, TXT, JPG, PNG р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐ (тЙд200 MB)",
        "load_sample": "ЁЯУЭ р░ир░ор▒Вр░ир░╛ р░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
        "sample_tip": "р░ор▒А р░╡р░жр▒Нр░ж р░лр▒Ир░▓р▒Н р░▓р▒Зр░Хр░кр▒Лр░др▒З р░ир░ор▒Вр░ир░╛р░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐.",
        "analysis_summary": "ЁЯУС р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░╕р░╛р░░р░╛р░Вр░╢р░В",
        "ask_questions": "ЁЯТм р░И р░кр░др▒Нр░░р░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░Чр░Вр░бр░┐",
        "ask_question_doc": "р░кр░др▒Нр░░р░В р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐тАж",
        "general_help": "ЁЯзн р░╕р░╛р░зр░╛р░░р░г",
        "help": "р░╕р░╣р░╛р░пр░В",
        "ask_general": "р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Пр░╡р▒Ир░ир░╛ р░╕р░╛р░зр░╛р░░р░г р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░Чр░Вр░бр░┐",
        "ask_question_general": "р░Пр░жр▒Ир░ир░╛",
        "question": "р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐тАж",
        "disclaimer": "тЪая╕П **р░ир░┐р░░р░╛р░Хр░░р░г:**",
        "disclaimer_text": "р░Тр░Х AI р░╕р░╛р░зр░ир░В р░ор░░р░┐р░пр▒Б р░др░кр▒Нр░кр▒Бр░▓р▒Б р░Ьр░░р▒Бр░Чр░╡р░Ър▒Нр░Ър▒Б. р░Ор░▓р▒Нр░▓р░кр▒Нр░кр▒Бр░бр▒В р░Ер░░р▒Нр░╣р░д р░Хр░▓р░┐р░Чр░┐р░и",
        "disclaimer_end": "р░ир░┐р░кр▒Бр░гр▒Бр░бр░┐р░ир░┐ р░Хр▒Ар░▓р░Х р░╡р░┐р░╖р░пр░╛р░▓ р░Хр▒Лр░╕р░В р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐ред",
        "language": "ЁЯМН р░нр░╛р░╖",
        "sector": "ЁЯУК р░░р░Вр░Чр░В",
        "extracting": "р░Яр▒Жр░Хр▒Нр░╕р▒Нр░Яр▒Н р░╡р▒Жр░▓р░┐р░Хр░┐р░др▒Ар░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ВтАж",
        "generating": "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░░р▒Вр░кр▒Кр░Вр░жр░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ВтАж",
        "thinking": "р░Жр░▓р▒Лр░Ър░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░В...",
        "no_text": "р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░╕р░┐р░и р░лр▒Ир░▓р▒НтАМр░▓р▒Л р░Ър░жр░╡р░Чр░▓р░┐р░Чр▒З р░Яр▒Жр░Хр▒Нр░╕р▒Нр░Яр▒Н р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░▓р▒Зр░жр▒Б."
    },
    "╪з╪▒╪п┘И": {
        "select_language": "ЁЯМН ╪з┘╛┘Ж█М ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        "choose_language": "╪м╪з╪▒█М ╪▒┌й┌╛┘Ж█Т ┌й█Т ┘Д█М█Т ╪з┘╛┘Ж█М ┘╛╪│┘Ж╪п█М╪п█Б ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        "choose_sector": "╪з┘╛┘Ж╪з ╪┤╪╣╪и█Б ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        "selected_language": "┘Е┘Ж╪к╪о╪и ┌й╪▒╪п█Б ╪▓╪и╪з┘Ж",
        "legal_docs": "┘В╪з┘Ж┘И┘Ж█М ╪п╪│╪к╪з┘И█М╪▓╪з╪к ╪з┘И╪▒ ┘Е╪┤╪з┘И╪▒╪к",
        "medical_reports": "╪╖╪и█М ╪▒┘╛┘И╪▒┘╣╪│ ╪з┘И╪▒ ╪к╪м╪▓█М█Б",
        "agro_reports": "╪▓╪▒╪╣█М ╪▒┘╛┘И╪▒┘╣╪│ ╪з┘И╪▒ ╪▒█Б┘Ж┘Е╪з╪ж█М",
        "back_language": "тЖР ╪▓╪и╪з┘Ж ┌й█Т ╪з┘Ж╪к╪о╪з╪и ┘╛╪▒ ┘И╪з┘╛╪│ ╪м╪з╪ж█М┌║",
        "settings": "тЪЩя╕П ╪к╪▒╪к█М╪и╪з╪к",
        "change_lang_sector": "ЁЯФД ╪▓╪и╪з┘Ж/╪┤╪╣╪и█Б ╪к╪и╪п█М┘Д ┌й╪▒█М┌║",
        "current": "┘Е┘И╪м┘И╪п█Б",
        "upload_analyze": "╪з┘╛ ┘Д┘И┌И ╪з┘И╪▒ ╪к╪м╪▓█М█Б ┌й╪▒█М┌║",
        "document": "╪п╪│╪к╪з┘И█М╪▓",
        "upload_files": "PDF, DOCX, TXT, JPG, PNG ╪з┘╛ ┘Д┘И┌И ┌й╪▒█М┌║ (тЙд200 MB)",
        "load_sample": "ЁЯУЭ ┘Ж┘Е┘И┘Ж█Б ┘Д┘И┌И ┌й╪▒█М┌║",
        "sample_tip": "╪з┌п╪▒ ╪в┘╛ ┌й█Т ┘╛╪з╪│ ┘Б╪з╪ж┘Д ┘Ж█Б█М┌║ █Б█Т ╪к┘И ┘Ж┘Е┘И┘Ж█Б ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒█М┌║█Ф",
        "analysis_summary": "ЁЯУС ╪к╪м╪▓█М█Б ╪о┘Д╪з╪╡█Б",
        "ask_questions": "ЁЯТм ╪з╪│ ╪п╪│╪к╪з┘И█М╪▓ ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ╪│┘И╪з┘Д╪з╪к ┘╛┘И┌Ж┌╛█М┌║",
        "ask_question_doc": "╪п╪│╪к╪з┘И█М╪▓ ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ╪│┘И╪з┘Д ┘╛┘И┌Ж┌╛█М┌║тАж",
        "general_help": "ЁЯзн ╪╣╪з┘Е",
        "help": "┘Е╪п╪п",
        "ask_general": "┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ┌й┘И╪ж█М ╪и┌╛█М ╪╣╪з┘Е ╪│┘И╪з┘Д╪з╪к ┘╛┘И┌Ж┌╛█М┌║",
        "ask_question_general": "┌й┘И╪ж█М ╪и┌╛█М",
        "question": "╪│┘И╪з┘Д ┘╛┘И┌Ж┌╛█М┌║тАж",
        "disclaimer": "тЪая╕П **╪п╪│╪к╪и╪▒╪п╪з╪▒█М:**",
        "disclaimer_text": "╪з█М┌й AI ┘╣┘И┘Д █Б█Т ╪з┘И╪▒ ╪║┘Д╪╖█М╪з┌║ █Б┘И ╪│┌й╪к█М █Б█М┌║█Ф █Б┘Е█М╪┤█Б ╪з█Б┘Д",
        "disclaimer_end": "┘╛█М╪┤█Б ┘И╪▒ ╪│█Т ╪з█Б┘Е ┘Е╪╣╪з┘Е┘Д╪з╪к ┌й█Т ┘Д█М█Т ┘Е╪┤┘И╪▒█Б ┘Д█М┌║█Ф",
        "language": "ЁЯМН ╪▓╪и╪з┘Ж",
        "sector": "ЁЯУК ╪┤╪╣╪и█Б",
        "extracting": "┘╣█М┌й╪│┘╣ ┘Ж┌й╪з┘Д╪з ╪м╪з ╪▒█Б╪з █Б█ТтАж",
        "generating": "╪к╪м╪▓█М█Б ╪к█М╪з╪▒ ┌й█М╪з ╪м╪з ╪▒█Б╪з █Б█ТтАж",
        "thinking": "╪│┘И┌Ж ╪▒█Б█Т █Б█М┌║...",
        "no_text": "╪з┘╛ ┘Д┘И┌И ╪┤╪п█Б ┘Б╪з╪ж┘Д ┘Е█М┌║ ┘╛┌С┌╛┘Ж█Т ┌й█Т ┘В╪з╪и┘Д ┘╣█М┌й╪│┘╣ ┘Ж█Б█М┌║ ┘Е┘Д╪з█Ф"
    }
}

def get_text(key):
    """Get translated text based on selected language"""
    lang = st.session_state.get("selected_language", "English")
    return UI_TRANSLATIONS.get(lang, UI_TRANSLATIONS["English"]).get(key, key)

def pick_language(user_text: str) -> str:
    pref = st.session_state.get("selected_language", "English")
    return pref

def pick_tts_code(lang_name: str) -> str:
    return LANG_CODE_MAP_TTS.get(lang_name, "en")

def pick_ocr_code() -> str:
    pref = st.session_state.get("selected_language", "English")
    return LANG_CODE_MAP_OCR.get(pref, "eng")

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# AI FUNCTIONS (UPDATED FOR SECTOR RESTRICTION)
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def get_sector_prompt(sector, mode="summary"):
    prompts = {
        "Law": {
            "summary": "You are LawLens тЪЦя╕П, a legal document explainer. ONLY analyze legal documents, contracts, agreements, laws, regulations, court cases, and legal matters.",
            "chat": "You are LawLens тЪЦя╕П, a legal assistant. ONLY answer questions about legal documents, legal terms, laws, regulations, and legal procedures.",
            "general": "You are LawLens тЪЦя╕П, a legal guide. ONLY provide legal information, legal advice, law explanations, legal procedures, and legal guidance."
        },
        "Medical": {
            "summary": "You are MedLens ЁЯПе, a medical document explainer. ONLY analyze medical reports, test results, prescriptions, medical records, health documents, and medical matters.",
            "chat": "You are MedLens ЁЯПе, a medical assistant. ONLY answer questions about medical documents, medical terminology, health conditions, treatments, and medical procedures.",
            "general": "You are MedLens ЁЯПе, a medical guide. ONLY provide medical information, health advice, medical explanations, disease information, and health guidance."
        },
        "Agriculture": {
            "summary": "You are AgroLens ЁЯМ╛, an agricultural document explainer. ONLY analyze agricultural reports, soil tests, crop data, farming documents, weather reports, and agricultural matters.",
            "chat": "You are AgroLens ЁЯМ╛, an agricultural assistant. ONLY answer questions about farming documents, agricultural terms, crops, soil, weather, and farming procedures.",
            "general": "You are AgroLens ЁЯМ╛, an agricultural guide. ONLY provide farming information, agricultural advice, crop guidance, soil management, and farming techniques."
        }
    }
    return prompts.get(sector, prompts["Law"]).get(mode, prompts["Law"]["summary"])

def ask_ai(document_text=None, query=None, mode="summary"):
    sector = st.session_state.selected_sector
    language = st.session_state.selected_language
    
    # Check for critical medical keywords across all sectors
    critical_medical_keywords = [
        # English
        "emergency", "urgent", "critical", "severe", "chest pain", "heart attack", 
        "stroke", "bleeding", "unconscious", "poisoning", "overdose", "suicide",
        "difficulty breathing", "allergic reaction", "seizure", "trauma", "fracture",
        "high fever", "blood pressure", "diabetes", "insulin", "medication error",
        "swelling", "rash", "infection", "wound", "burn", "accident", "injury",
        
        # Hindi
        "рдЖрдкрд╛рддрдХрд╛рд▓", "рддрддреНрдХрд╛рд▓", "рдЧрдВрднреАрд░", "рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж", "рджрд┐рд▓ рдХрд╛ рджреМрд░рд╛", "рдЦреВрди рдмрд╣рдирд╛",
        "рдмреЗрд╣реЛрд╢", "рдЬрд╣рд░", "рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ", "рдПрд▓рд░реНрдЬреА", "рдмреБрдЦрд╛рд░", "рд░рдХреНрддрдЪрд╛рдк", "рдордзреБрдореЗрд╣",
        "рд╕реВрдЬрди", "рд╕рдВрдХреНрд░рдордг", "рдШрд╛рд╡", "рдЬрд▓рдирд╛", "рдЪреЛрдЯ",
        
        # Telugu
        "р░Ер░др▒Нр░пр░╡р░╕р░░", "р░др░Хр▒Нр░╖р░г", "р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и", "р░Ыр░╛р░др▒А р░ир▒Кр░кр▒Нр░кр░┐", "р░Чр▒Бр░Вр░бр▒Жр░кр▒Лр░Яр▒Б", "р░░р░Хр▒Нр░др░╕р▒Нр░░р░╛р░╡р░В",
        "р░Ер░кр░╕р▒Нр░ор░╛р░░р░Х", "р░╡р░┐р░╖р░В", "р░╢р▒Нр░╡р░╛р░╕ р░др▒Ар░╕р▒Бр░Хр▒Лр░╡р░бр░Вр░▓р▒Л р░Зр░мр▒Нр░мр░Вр░жр░┐", "р░Ер░▓р▒Жр░░р▒Нр░Ьр▒А", "р░Ьр▒Нр░╡р░░р░В", "р░░р░Хр▒Нр░др░кр▒Лр░Яр▒Б",
        "р░ор░зр▒Бр░ор▒Зр░╣р░В", "р░╡р░╛р░кр▒Б", "р░Зр░ир▒Нр░лр▒Жр░Хр▒Нр░╖р░ир▒Н", "р░Чр░╛р░пр░В", "р░Хр░╛р░▓р░┐р░и р░Чр░╛р░пр░В", "р░жр▒Жр░мр▒Нр░м",
        
        # Urdu
        "█Б┘Ж┌п╪з┘Е█М", "┘Б┘И╪▒█М", "╪┤╪п█М╪п", "╪│█М┘Ж█Т ┘Е█М┌║ ╪п╪▒╪п", "╪п┘Д ┌й╪з ╪п┘И╪▒█Б", "╪о┘И┘Ж ╪и█Б┘Ж╪з",
        "╪и█Т █Б┘И╪┤", "╪▓█Б╪▒", "╪│╪з┘Ж╪│ ┘Д█М┘Ж█Т ┘Е█М┌║ ╪п╪┤┘И╪з╪▒█М", "╪з┘Д╪▒╪м█М", "╪и╪о╪з╪▒", "╪и┘Д┌И ┘╛╪▒█М╪┤╪▒",
        "╪░█М╪з╪и█М╪╖╪│", "╪│┘И╪м┘Ж", "╪з┘Ж┘Б█М┌й╪┤┘Ж", "╪▓╪о┘Е", "╪м┘Д┘Ж╪з", "┌Ж┘И┘╣"
    ]
    
    # Check if query contains critical medical terms
    is_medical_emergency = False
    if query:
        query_lower = query.lower()
        is_medical_emergency = any(keyword.lower() in query_lower for keyword in critical_medical_keywords)
    
    # If it's a medical emergency, override sector restrictions
    if is_medical_emergency and sector != "Medical":
        emergency_prompt = f"""
        ЁЯЪи MEDICAL EMERGENCY OVERRIDE ЁЯЪи
        
        You are now temporarily acting as MedLens ЁЯПе because this appears to be a critical medical query that could involve immediate harm.
        
        RESPOND IMMEDIATELY in {language} with:
        1. **EMERGENCY WARNING**: If this is a life-threatening situation, contact emergency services immediately
        2. **BASIC GUIDANCE**: Provide essential first aid or immediate steps
        3. **SEEK PROFESSIONAL HELP**: Strongly advise to consult medical professionals
        4. **DISCLAIMER**: Emphasize this is emergency guidance only, not professional medical advice
        
        User's critical medical query: {query}
        Document context (if any): {document_text or "No document provided"}
        
        Respond with urgency and care, prioritizing user safety.
        """
        
        response = model.generate_content(
            emergency_prompt,
            generation_config={
                "temperature": 0.3,  # Lower temperature for more precise emergency response
                "max_output_tokens": 1000
            }
        )
        
        # Add emergency warning header
        emergency_response = f"""
        ЁЯЪи **MEDICAL EMERGENCY RESPONSE** ЁЯЪи
        *(Sector restriction overridden for potential medical emergency)*
        
        {response.text}
        
        тЪая╕П **CRITICAL**: If this is a life-threatening emergency, contact emergency services (108/102 in India, 911 in US, etc.) IMMEDIATELY.
        """
        
        return emergency_response
    
    # Regular sector-specific responses
    if sector != "Medical":
        sector_restriction = f"""
        CRITICAL: You MUST only provide {sector.lower()}-related information. 
        - If the user asks about other topics (law, medicine, agriculture) outside your {sector.lower()} specialty, respond: "рдореБрдЭреЗ рдЦреБрд╢реА рд╣реЛрдЧреА рдХрд┐ рдореИрдВ рдХреЗрд╡рд▓ {sector.lower()} рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдкреНрд░рд╢реНрдиреЛрдВ рдХрд╛ рдЙрддреНрддрд░ рджреЗ рд╕рдХреВрдВред рдХреГрдкрдпрд╛ рдЕрдиреНрдп рд╡рд┐рд╖рдпреЛрдВ рдХреЗ рд▓рд┐рдП рдЙрдкрдпреБрдХреНрдд рд╕реЗрдХреНрд╢рди рдореЗрдВ рдЬрд╛рдПрдВред" (in the selected language)
        - REFUSE to answer non-{sector.lower()} questions completely.
        - Stay strictly within {sector.lower()} domain.
        - EXCEPTION: If you detect a potential medical emergency, you may provide basic safety guidance.
        """
    else:
        sector_restriction = f"You are in the Medical sector. Provide comprehensive medical guidance and information."
    
    lang_clause = f"Respond ONLY in {language}. All text, labels, headings, and content must be completely in {language}. Do not mix languages."
    base_prompt = get_sector_prompt(sector, mode)
    
    if mode == "summary":
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}

Analyze this {sector.lower()} document in {language}:
- Provide summary completely in {language}
- Key findings/obligations in {language} 
- Important dates/recommendations in {language}
- Risk factors/indicators in {language}
- All headings and labels in {language}

Document:
{document_text}
"""
    elif mode == "chat":
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}

Document context:
{document_text}

User question: {query}

IMPORTANT: 
1. Only answer if this question is related to {sector.lower()}
2. If not related to {sector.lower()}, respond in {language}: "I can only help with {sector.lower()}-related questions about your document."
3. Answer completely in {language}
4. EXCEPTION: For potential medical emergencies, provide basic safety guidance regardless of sector.
"""
    else:
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}

User question: {query}

IMPORTANT: 
1. Only answer {sector.lower()}-related questions
2. If question is about other topics, respond in {language}: "I specialize only in {sector.lower()}. Please switch to the appropriate sector for other topics."
3. Provide answer completely in {language}
4. EXCEPTION: For potential medical emergencies, provide basic safety guidance regardless of sector.
"""

    response = model.generate_content(
        prompt,
        generation_config={
            "temperature": 0.7,
            "max_output_tokens": 800
        }
    )
    return response.text

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# TTS FUNCTIONS
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def clean_text(text: str) -> str:
    emoji_pattern = re.compile(
        "["
        u"\U0001F600-\U0001F64F"
        u"\U0001F300-\U0001F5FF"
        u"\U0001F680-\U0001F6FF"
        u"\U0001F1E0-\U0001F1FF"
        u"\U00002700-\U000027BF"
        u"\U0001F900-\U0001F9FF"
        u"\U00002600-\U000026FF"
        u"\U00002B00-\U00002BFF"
        "]+", flags=re.UNICODE
    )
    text = emoji_pattern.sub(r'', text)
    text = re.sub(r'(\*\*|__|\*|_|#+)', '', text)
    return text.strip()

def tts_speak_toggle(text: str, lang_name: str):
    safe_text = clean_text(text)
    lang_code = pick_tts_code(lang_name)
    
    try:
        tts = gTTS(text=safe_text, lang=lang_code, slow=False)
        audio_buffer = io.BytesIO()
        tts.write_to_fp(audio_buffer)
        audio_buffer.seek(0)
        st.audio(audio_buffer.getvalue(), format='audio/mp3')
    except Exception as e:
        st.error(f"TTS generation failed: {e}")

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# OCR FUNCTIONS
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
@st.cache_data(show_spinner=False, ttl=3600)
def ocr_image_bytes(img_bytes: bytes, lang_code: str) -> str:
    try:
        img = Image.open(io.BytesIO(img_bytes))
        txt = pytesseract.image_to_string(img, lang=lang_code).strip()
        return txt
    except Exception as e:
        return f"__OCR_ERROR__ {e}"

def preprocess_pil(img: Image.Image) -> Image.Image:
    if img.mode != "RGB":
        img = img.convert("RGB")
    return img

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# TEXT EXTRACTION FUNCTIONS
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def extract_text_from_pdf(uploaded_file) -> str:
    try:
        uploaded_file.seek(0)
        pdf = PyPDF2.PdfReader(uploaded_file)
        txt = "\n".join((p.extract_text() or "") for p in pdf.pages).strip()
        if len(txt) > 20:
            return txt
    except Exception as e:
        st.warning(f"PyPDF2 failed: {e}")

    lang_code = pick_ocr_code()
    try:
        uploaded_file.seek(0)
        import pdf2image
        images = pdf2image.convert_from_bytes(uploaded_file.read(), dpi=300, first_page=1, last_page=10)
        out = []
        bar = st.progress(0.0)
        for i, im in enumerate(images, 1):
            im = preprocess_pil(im)
            buf = io.BytesIO()
            im.save(buf, format="PNG")
            page_bytes = buf.getvalue()
            text = ocr_image_bytes(page_bytes, lang_code)
            if not text.startswith("__OCR_ERROR__"):
                out.append(text)
            bar.progress(i/len(images))
        bar.empty()
        combined = "\n".join(out).strip()
        if combined:
            return combined
    except Exception as e:
        st.info(f"pdf2image/OCR skipped: {e}")

    st.error("тЭМ Could not extract readable text from this PDF.")
    return ""

def extract_text_from_docx(f):
    try:
        return "\n".join(p.text for p in docx.Document(f).paragraphs).strip()
    except Exception as e:
        st.error(f"DOCX read error: {e}")
        return ""

def extract_text_from_image(f):
    try:
        img = Image.open(f)
        img = preprocess_pil(img)
        buf = io.BytesIO()
        img.save(buf, format="PNG")
        lang_code = pick_ocr_code()
        txt = ocr_image_bytes(buf.getvalue(), lang_code)
        if txt and not txt.startswith("__OCR_ERROR__"):
            return txt
        if txt.startswith("__OCR_ERROR__"):
            st.error(txt.replace("__OCR_ERROR__", "OCR error:"))
    except Exception as e:
        st.error(f"OCR image error: {e}")
    return ""

def extract_text(file):
    if not file:
        return ""
    ext = file.name.lower().split(".")[-1]
    if ext == "pdf":
        return extract_text_from_pdf(file)
    elif ext == "docx":
        return extract_text_from_docx(file)
    elif ext in ("jpg", "jpeg", "png"):
        return extract_text_from_image(file)
    elif ext == "txt":
        return file.read().decode("utf-8", errors="ignore")
    else:
        st.error("Unsupported file type")
        return ""

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# LANGUAGE SELECTION PAGE
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def show_language_selection():
    st.markdown("<h1 style='text-align: center; color: #1f77b4;'>ЁЯМН Select Your Language</h1>", unsafe_allow_html=True)
    st.markdown("<p style='text-align: center; font-size: 18px; margin-bottom: 40px;'>Choose your preferred language to continue</p>", unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button(f"{LANGUAGES['English']} English", key="eng", use_container_width=True, help="Select English"):
            st.session_state.selected_language = "English"
            st.session_state.language_selected = True
            st.rerun()
            
        if st.button(f"{LANGUAGES['р░др▒Жр░▓р▒Бр░Чр▒Б']} р░др▒Жр░▓р▒Бр░Чр▒Б", key="tel", use_container_width=True, help="Select Telugu"):
            st.session_state.selected_language = "р░др▒Жр░▓р▒Бр░Чр▒Б"
            st.session_state.language_selected = True
            st.rerun()
    
    with col2:
        if st.button(f"{LANGUAGES['рд╣рд┐рдВрджреА']} рд╣рд┐рдВрджреА", key="hin", use_container_width=True, help="Select Hindi"):
            st.session_state.selected_language = "рд╣рд┐рдВрджреА"
            st.session_state.language_selected = True
            st.rerun()
            
        if st.button(f"{LANGUAGES['╪з╪▒╪п┘И']} ╪з╪▒╪п┘И", key="urd", use_container_width=True, help="Select Urdu"):
            st.session_state.selected_language = "╪з╪▒╪п┘И"
            st.session_state.language_selected = True
            st.rerun()

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# SECTOR SELECTION PAGE
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def show_sector_selection():
    st.markdown(f"<h1 style='text-align: center; color: #1f77b4;'>{get_text('choose_sector')}</h1>", unsafe_allow_html=True)
    st.markdown(f"<p style='text-align: center; font-size: 18px; margin-bottom: 40px;'>{get_text('selected_language')}: {LANGUAGES[st.session_state.selected_language]} {st.session_state.selected_language}</p>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("<div style='text-align: center; font-size: 64px; margin: 20px 0;'>тЪЦя╕П</div>", unsafe_allow_html=True)
        if st.button("Law", key="law_btn", use_container_width=True, help="Legal document analysis"):
            st.session_state.selected_sector = "Law"
            st.session_state.sector_selected = True
            st.rerun()
        st.markdown(f"<p style='text-align: center; font-size: 14px; color: #666;'>{get_text('legal_docs')}</p>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("<div style='text-align: center; font-size: 64px; margin: 20px 0;'>ЁЯПе</div>", unsafe_allow_html=True)
        if st.button("Medical", key="med_btn", use_container_width=True, help="Medical document analysis"):
            st.session_state.selected_sector = "Medical"
            st.session_state.sector_selected = True
            st.rerun()
        st.markdown(f"<p style='text-align: center; font-size: 14px; color: #666;'>{get_text('medical_reports')}</p>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("<div style='text-align: center; font-size: 64px; margin: 20px 0;'>ЁЯМ╛</div>", unsafe_allow_html=True)
        if st.button("Agriculture", key="agr_btn", use_container_width=True, help="Agricultural document analysis"):
            st.session_state.selected_sector = "Agriculture"
            st.session_state.sector_selected = True
            st.rerun()
        st.markdown(f"<p style='text-align: center; font-size: 14px; color: #666;'>{get_text('agro_reports')}</p>", unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button(get_text("back_language"), use_container_width=True):
        st.session_state.language_selected = False
        st.session_state.selected_language = ""
        st.rerun()

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# MAIN APPLICATION
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def show_main_app():
    sector_info = SECTORS[st.session_state.selected_sector]
    st.title(f"{sector_info['emoji']} {st.session_state.selected_sector}Lens тАУ {get_text('upload_analyze')} & Chat")
    
    # Language indicator
    st.info(f"{get_text('language')}: {LANGUAGES[st.session_state.selected_language]} {st.session_state.selected_language} | {get_text('sector')}: {sector_info['emoji']} {st.session_state.selected_sector}")
    
    # Settings in sidebar
    with st.sidebar:
        st.subheader(get_text("settings"))
        if st.button(get_text("change_lang_sector"), use_container_width=True):
            # Reset all states - FIXED
            st.session_state.language_selected = False
            st.session_state.sector_selected = False
            st.session_state.selected_language = ""
            st.session_state.selected_sector = ""
            st.session_state.doc_text = ""
            st.session_state.summary = ""
            st.session_state.chat_history = []        # тЬЕ Must be list
            st.session_state.general_messages = []    # тЬЕ Must be list
            st.rerun()
        
        st.markdown("---")
        st.caption(f"{get_text('current')}: {st.session_state.selected_language} тЖТ {st.session_state.selected_sector}")
    
    # Main tabs
    tab_doc, tab_gen = st.tabs([f"ЁЯУД {st.session_state.selected_sector} {get_text('upload_analyze')}", f"{get_text('general_help')} {st.session_state.selected_sector} {get_text('help')}"])
    
    with tab_doc:
        st.header(f"ЁЯУД {get_text('upload_analyze')} {st.session_state.selected_sector} {get_text('document')}")
        up = st.file_uploader(
            get_text("upload_files"),
            type=["pdf", "docx", "txt", "jpg", "jpeg", "png"]
        )
        
        # Sample button
        colA, colB = st.columns(2)
        with colA:
            sample_btn = st.button(f"{get_text('load_sample')} {st.session_state.selected_sector.lower()} {get_text('document')}")
        with colB:
            st.caption(get_text("sample_tip"))
        
        # Sample text based on sector
        if sample_btn and not up:
            samples = {
                "Law": "Service Agreement between Alpha Pvt Ltd and Beta Traders. Parties agree to monthly deliveries by the 5th. Late delivery incurs 2% of invoice per week. Either party may terminate with 30 days notice. Disputes: Hyderabad jurisdiction.",
                "Medical": "Patient: John Doe. Blood Pressure: 140/90 mmHg (elevated). Glucose: 180 mg/dL (high). Cholesterol: 250 mg/dL. Recommendation: Start antihypertensive medication. Follow low-sodium diet. Recheck in 4 weeks.",
                "Agriculture": "Soil Report - Field A: pH 6.8, Nitrogen 45 ppm (low), Phosphorus 25 ppm (adequate), Potassium 180 ppm (high). Crop: Wheat. Recommendation: Apply 120 kg/ha Urea. Expected yield: 4.2 tons/ha. Next soil test: 6 months."
            }
            st.session_state.doc_text = samples[st.session_state.selected_sector]
            with st.spinner(get_text("generating")):
                st.session_state.summary = ask_ai(document_text=st.session_state.doc_text, mode="summary")
        
        if up:
            with st.spinner(get_text("extracting")):
                text = extract_text(up)
            if text:
                st.session_state.doc_text = text
                with st.spinner(get_text("generating")):
                    st.session_state.summary = ask_ai(document_text=text, mode="summary")
            else:
                st.warning(get_text("no_text"))
        
        if st.session_state.summary:
            st.subheader(get_text("analysis_summary"))
            st.write(st.session_state.summary)
            tts_speak_toggle(st.session_state.summary, st.session_state.selected_language)
            
            st.divider()
            st.subheader(get_text("ask_questions"))
            
            # Chat history
            for m in st.session_state.chat_history:
                with st.chat_message(m["role"]):
                    st.markdown(m["content"])
                    if m["role"] == "assistant":
                        tts_speak_toggle(m["content"], st.session_state.selected_language)
            
            # Chat input
            q = st.chat_input(get_text("ask_question_doc"))
            if q:
                st.session_state.chat_history.append({"role": "user", "content": q})
                with st.spinner(get_text("thinking")):
                    ans = ask_ai(document_text=st.session_state.doc_text, query=q, mode="chat")
                st.session_state.chat_history.append({"role": "assistant", "content": ans})
                st.rerun()
    
    with tab_gen:
        st.header(f"{get_text('general_help')} {st.session_state.selected_sector} {get_text('help')}")
        st.caption(f"{get_text('ask_general')} {st.session_state.selected_sector.lower()}")
        
        # General chat history
        for m in st.session_state.general_messages:
            with st.chat_message(m["role"]):
                st.markdown(m["content"])
                if m["role"] == "assistant":
                    tts_speak_toggle(m["content"], st.session_state.selected_language)
        
        # General chat input
        q2 = st.chat_input(f"{get_text('ask_question_general')} {st.session_state.selected_sector.lower()} {get_text('question')}")
        if q2:
            st.session_state.general_messages.append({"role": "user", "content": q2})
            with st.spinner(get_text("thinking")):
                ans2 = ask_ai(query=q2, mode="general")
            st.session_state.general_messages.append({"role": "assistant", "content": ans2})
            st.rerun()
    
    # Disclaimer
    st.markdown(f"""---
{get_text("disclaimer")} {st.session_state.selected_sector}Lens {get_text("disclaimer_text")} {st.session_state.selected_sector.lower()} {get_text("disclaimer_end")}
""")

# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
# MAIN APP LOGIC
# тФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФАтФА
def main():
    if not st.session_state.language_selected:
        show_language_selection()
    elif not st.session_state.sector_selected:
        show_sector_selection()
    else:
        show_main_app()

if __name__ == "__main__":
    main()
