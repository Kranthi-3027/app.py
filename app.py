# -------------------------------------------------
# Multi-Sector Document Analysis App (Enhanced UI, Readable Text)
# -------------------------------------------------
import os, io, re, time, html, hashlib, base64
from dotenv import load_dotenv
load_dotenv()

import streamlit as st
import PyPDF2, docx
from PIL import Image
import pytesseract
from langdetect import detect
import google.generativeai as genai
from gtts import gTTS

# -------------------------------------------------
# API / Models
# -------------------------------------------------
API_KEY = os.getenv("GEMINI_KEY", "")
genai.configure(api_key=API_KEY)
MODEL_NAME = os.getenv("GEMINI_MODEL", "gemini-2.5-flash-lite")
model = genai.GenerativeModel(MODEL_NAME)
vision_model = genai.GenerativeModel(MODEL_NAME)

# -------------------------------------------------
# App Config (wide layout looks better with new UI)
# -------------------------------------------------
st.set_page_config(
    page_title="Document Analysis Hub",
    page_icon="ЁЯФН",
    layout="wide"
)

# -------------------------------------------------
# State Defaults
# -------------------------------------------------
DEFAULT_STATE = {
    "language_selected": False,
    "sector_selected": False,
    "selected_language": "",
    "selected_sector": "",
    "doc_text": "",
    "summary": "",
    "chat_history": [],
    "general_messages": [],
    "resp_lang": "Auto (match user)",
    "ocr_lang": "Auto",
    "last_user_input": "",
    "_render_flag": False
}
for k, v in DEFAULT_STATE.items():
    st.session_state.setdefault(k, v)

# -------------------------------------------------
# Languages / Sectors
# -------------------------------------------------
LANGUAGES = {
    "English": "ЁЯЗ║ЁЯЗ╕",
    "рд╣рд┐рдВрджреА": "ЁЯЗоЁЯЗ│",
    "р░др▒Жр░▓р▒Бр░Чр▒Б": "ЁЯЗоЁЯЗ│",
    "╪з╪▒╪п┘И": "ЁЯЗ╡ЁЯЗ░",
    "р┤ор┤▓р┤пр┤╛р┤│р┤В": "ЁЯЗоЁЯЗ│"
}
SECTORS = {
    "Law": {"emoji": "тЪЦя╕П", "symbol": "┬з"},
    "Medical": {"emoji": "ЁЯПе", "symbol": "+"},
    "Agriculture": {"emoji": "ЁЯМ╛", "symbol": "ЁЯЪЬ"}
}

LANG_CODE_MAP_TTS = {
    "English": "en", "рд╣рд┐рдВрджреА": "hi", "р░др▒Жр░▓р▒Бр░Чр▒Б": "te", "╪з╪▒╪п┘И": "ur", "р┤ор┤▓р┤пр┤╛р┤│р┤В": "ml"
}
LANG_CODE_MAP_OCR = {
    "English": "eng", "рд╣рд┐рдВрджреА": "hin", "р░др▒Жр░▓р▒Бр░Чр▒Б": "tel", "╪з╪▒╪п┘И": "urd", "р┤ор┤▓р┤пр┤╛р┤│р┤В": "mal"
}

SECTOR_LABELS = {
    "English":     {"Law": "Law",       "Medical": "Medical",      "Agriculture": "Agriculture"},
    "рд╣рд┐рдВрджреА":       {"Law": "рдХрд╛рдиреВрди",      "Medical": "рдЪрд┐рдХрд┐рддреНрд╕рд╛",       "Agriculture": "рдХреГрд╖рд┐"},
    "р░др▒Жр░▓р▒Бр░Чр▒Б":      {"Law": "р░Ър░Яр▒Нр░Яр░В",       "Medical": "р░╡р▒Ир░жр▒Нр░пр░В",        "Agriculture": "р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В"},
    "╪з╪▒╪п┘И":        {"Law": "┘В╪з┘Ж┘И┘Ж",       "Medical": "╪╖╪и█М",          "Agriculture": "╪▓╪▒╪з╪╣╪к"},
    "р┤ор┤▓р┤пр┤╛р┤│р┤В":     {"Law": "р┤ир┤┐р┤пр┤ор┤В",      "Medical": "р┤╡р╡Ир┤жр╡Нр┤пр┤╢р┤╛р┤╕р╡Нр┤др╡Нр┤░р┤В", "Agriculture": "р┤Хр╡Гр┤╖р┤┐"},
}

def sector_label(name: str) -> str:
    lang = st.session_state.get("selected_language", "English")
    return SECTOR_LABELS.get(lang, SECTOR_LABELS["English"]).get(name, name)

# -------------------------------------------------
# UI Translations (keys used throughout the app)
# -------------------------------------------------
UI_TRANSLATIONS = {
    "English": {
        "select_language": "ЁЯМН Select Your Language",
        "choose_language": "Choose your preferred language to continue",
        "choose_sector": "Choose Your Sector",
        "selected_language": "Selected Language",
        "back_language": "тЖР Back to Language Selection",
        "settings": "тЪЩя╕П Settings",
        "change_lang_sector": "ЁЯФД Change Language/Sector",
        "current": "Current",
        "uploader_any": "Upload ANY file type (ЁЯУД Documents + ЁЯЦ╝я╕П Images)",
        "sample_doc_btn": "ЁЯУЭ Load sample {sector} document",
        "sample_try": "Try sample data if there is no file ready",
        "extracting": "Extracting textтАж",
        "generating": "Generating analysisтАж",
        "thinking": "Thinking...",
        "no_text": "No readable text found in the uploaded file.",
        "analyzing_image": "ЁЯФН Analyzing image...",
        "image_analysis_header": "ЁЯЦ╝я╕П Image Analysis",
        "uploaded_image_caption": "Uploaded {sector} Image",
        "extracting_image_text": "Extracting text from image...",
        "enhanced_title_suffix": " Lens тАУ Enhanced AI Analysis",
        "info_law": "ЁЯМН Language: {lang_flag} {lang} | тЪЦя╕П Sector: All Document Types Analysis",
        "info_medical": "ЁЯМН Language: {lang_flag} {lang} | ЁЯПе Sector: Medical Analysis + Emergency Help + Image Diagnosis",
        "info_agri": "ЁЯМН Language: {lang_flag} {lang} | ЁЯМ╛ Sector: Agricultural Analysis + Crop Image Recognition",
        "tab_doc": "ЁЯУД Enhanced {sector} Analysis",
        "tab_gen": "ЁЯзн General {sector} Help",
        "enhanced_analysis_header": "ЁЯУК Enhanced {sector} Analysis",
        "chat_about_analysis": "ЁЯТм Ask Questions About This Analysis",
        "chat_placeholder": "Ask any question about this analysis...",
        "examples_try": "Try asking:",
        "gen_help_header": "ЁЯзн General {sector} Help & Consultation",
        "gen_help_caption": "Ask any {sector_lower}-related questions тАФ here to help!",
        "gen_chat_placeholder": "Ask any {sector_lower} question...",
        "examples_caption": "Example questions:",
        "enhanced_features_title": "ЁЯЪА Features:",
        "features_med_1": "ЁЯЪи Emergency medical response",
        "features_med_2": "ЁЯЦ╝я╕П Medical image analysis",
        "features_med_3": "ЁЯй║ Injury/disease detection",
        "features_agri_1": "ЁЯМ▒ Crop disease detection",
        "features_agri_2": "ЁЯРЫ Pest identification",
        "features_agri_3": "ЁЯУК Soil analysis from images",
        "features_law_1": "ЁЯУД ALL document types",
        "features_law_2": "тЪЦя╕П Legal analysis",
        "features_law_3": "ЁЯФН Comprehensive review",
        "disclaimer_block_header": "тЪая╕П Disclaimer:",
        "disclaimer_med": "- Medical: For emergencies, call 108/102 (India)",
        "disclaimer_law": "- Legal: Consult qualified legal professionals for important matters",
        "disclaimer_agri": "- Agricultural: Recommendations are generalтАФconsider local conditions",
        "disclaimer_footer": "- Always verify critical information with qualified professionals",
        "document": "Document",
        "analysis_summary": "ЁЯУС Analysis Summary"
    },
    "рд╣рд┐рдВрджреА": {
        "select_language": "ЁЯМН рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "choose_language": "рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "choose_sector": "рдЕрдкрдирд╛ рдХреНрд╖реЗрддреНрд░ рдЪреБрдиреЗрдВ",
        "selected_language": "рдЪрдпрдирд┐рдд рднрд╛рд╖рд╛",
        "back_language": "тЖР рднрд╛рд╖рд╛ рдЪрдпрди рдкрд░ рд╡рд╛рдкрд╕",
        "settings": "тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
        "change_lang_sector": "ЁЯФД рднрд╛рд╖рд╛/рдХреНрд╖реЗрддреНрд░ рдмрджрд▓реЗрдВ",
        "current": "рд╡рд░реНрддрдорд╛рди",
        "uploader_any": "рдХрд┐рд╕реА рднреА рдлрд╝рд╛рдЗрд▓ рдкреНрд░рдХрд╛рд░ рдХреЛ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ (ЁЯУД рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ + ЁЯЦ╝я╕П рдЫрд╡рд┐рдпрд╛рдБ)",
        "sample_doc_btn": "ЁЯУЭ рдирдореВрдирд╛ {sector} рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рд▓реЛрдб рдХрд░реЗрдВ",
        "sample_try": "рдпрджрд┐ рдлрд╝рд╛рдЗрд▓ рддреИрдпрд╛рд░ рдирд╣реАрдВ рд╣реИ рддреЛ рдирдореВрдирд╛ рдЖрдЬрд╝рдорд╛рдПрдБ",
        "extracting": "рдкрд╛рда рдирд┐рдХрд╛рд▓рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИтАж",
        "generating": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдмрдирд╛рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИтАж",
        "thinking": "рд╕реЛрдЪ рд░рд╣рд╛ рд╣реИ...",
        "no_text": "рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рдлрд╝рд╛рдЗрд▓ рдореЗрдВ рдкрдврд╝рдиреЗ рдпреЛрдЧреНрдп рдкрд╛рда рдирд╣реАрдВ рдорд┐рд▓рд╛ред",
        "analyzing_image": "ЁЯФН рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
        "image_analysis_header": "ЁЯЦ╝я╕П рдЫрд╡рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "uploaded_image_caption": "рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ {sector} рдЫрд╡рд┐",
        "extracting_image_text": "рдЫрд╡рд┐ рд╕реЗ рдкрд╛рда рдирд┐рдХрд╛рд▓рд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...",
        "enhanced_title_suffix": " рд▓реЗрдВрд╕ тАУ рдЙрдиреНрдирдд AI рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "info_law": "ЁЯМН рднрд╛рд╖рд╛: {lang_flag} {lang} | тЪЦя╕П рдХреНрд╖реЗрддреНрд░: рд╕рднреА рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдкреНрд░рдХрд╛рд░ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "info_medical": "ЁЯМН рднрд╛рд╖рд╛: {lang_flag} {lang} | ЁЯПе рдХреНрд╖реЗрддреНрд░: рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг + рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛ + рдЫрд╡рд┐ рдирд┐рджрд╛рди",
        "info_agri": "ЁЯМН рднрд╛рд╖рд╛: {lang_flag} {lang} | ЁЯМ╛ рдХреНрд╖реЗрддреНрд░: рдХреГрд╖рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг + рдлрд╕рд▓ рдЫрд╡рд┐ рдкрд╣рдЪрд╛рди",
        "tab_doc": "ЁЯУД рдЙрдиреНрдирдд {sector} рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "tab_gen": "ЁЯзн рд╕рд╛рдорд╛рдиреНрдп {sector} рд╕рд╣рд╛рдпрддрд╛",
        "enhanced_analysis_header": "ЁЯУК рдЙрдиреНрдирдд {sector} рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "chat_about_analysis": "ЁЯТм рдЗрд╕ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
        "chat_placeholder": "рдЗрд╕ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдХреЛрдИ рднреА рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ...",
        "examples_try": "рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ рдкреВрдЫрдиреЗ рдХреА:",
        "gen_help_header": "ЁЯзн рд╕рд╛рдорд╛рдиреНрдп {sector} рд╕рд╣рд╛рдпрддрд╛ рдФрд░ рдкрд░рд╛рдорд░реНрд╢",
        "gen_help_caption": "рдХрд┐рд╕реА рднреА {sector_lower}-рд╕рдВрдмрдВрдзрд┐рдд рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ тАФ рдорджрдж рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░!",
        "gen_chat_placeholder": "рдХреЛрдИ рднреА {sector_lower} рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ...",
        "examples_caption": "рдЙрджрд╛рд╣рд░рдг рдкреНрд░рд╢реНрди:",
        "enhanced_features_title": "ЁЯЪА рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ:",
        "features_med_1": "ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛",
        "features_med_2": "ЁЯЦ╝я╕П рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЫрд╡рд┐ рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "features_med_3": "ЁЯй║ рдЪреЛрдЯ/рд░реЛрдЧ рдкрд╣рдЪрд╛рди",
        "features_agri_1": "ЁЯМ▒ рдлрд╕рд▓ рд░реЛрдЧ рдкрд╣рдЪрд╛рди",
        "features_agri_2": "ЁЯРЫ рдХреАрдЯ рдкрд╣рдЪрд╛рди",
        "features_agri_3": "ЁЯУК рдЫрд╡рд┐рдпреЛрдВ рд╕реЗ рдорд┐рдЯреНрдЯреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "features_law_1": "ЁЯУД рд╕рднреА рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдкреНрд░рдХрд╛рд░",
        "features_law_2": "тЪЦя╕П рдХрд╛рдиреВрдиреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг",
        "features_law_3": "ЁЯФН рд╡реНрдпрд╛рдкрдХ рд╕рдореАрдХреНрд╖рд╛",
        "disclaimer_block_header": "тЪая╕ПрдЕрд╕реНрд╡реАрдХрд░рдг:",
        "disclaimer_med": "- рдЪрд┐рдХрд┐рддреНрд╕рд╛: рдЖрдкрд╛рддрд╕реНрдерд┐рддрд┐ рдореЗрдВ 108/102 рдХреЙрд▓ рдХрд░реЗрдВ (рднрд╛рд░рдд)",
        "disclaimer_law": "- рдХрд╛рдиреВрдиреА: рдорд╣рддреНрд╡рдкреВрд░реНрдг рдорд╛рдорд▓реЛрдВ рдореЗрдВ рдпреЛрдЧреНрдп рд╡рд┐рдзрд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХрд░реЗрдВ",
        "disclaimer_agri": "- рдХреГрд╖рд┐: рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рд╕рд╛рдорд╛рдиреНрдп рд╣реИрдВтАФрд╕реНрдерд╛рдиреАрдп рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ",
        "disclaimer_footer": "- рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЬрд╛рдирдХрд╛рд░реА рдХреЛ рд╣рдореЗрд╢рд╛ рдпреЛрдЧреНрдп рд╡рд┐рд╢реЗрд╖рдЬреНрдЮреЛрдВ рд╕реЗ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ",
        "document": "рджрд╕реНрддрд╛рд╡реЗрдЬрд╝",
        "analysis_summary": "ЁЯУС рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╕рд╛рд░рд╛рдВрд╢"
    },
    "р░др▒Жр░▓р▒Бр░Чр▒Б": {
        "select_language": "ЁЯМН р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "choose_language": "р░Хр▒Кр░ир░╕р░╛р░Чр▒Зр░Вр░жр▒Бр░Хр▒Б р░ор▒Ар░Хр▒Б р░ир░Ър▒Нр░Ър░┐р░и р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "choose_sector": "р░ор▒А р░╡р░┐р░нр░╛р░Чр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "selected_language": "р░Ор░Вр░Ър▒Бр░Хр▒Бр░ир▒Нр░и р░нр░╛р░╖",
        "back_language": "тЖР р░нр░╛р░╖ р░Ор░Вр░кр░┐р░Хр░Хр▒Б р░╡р▒Жр░ир░Хр▒Нр░Хр░┐",
        "settings": "тЪЩя╕П р░Ер░ор░░р░┐р░Хр░▓р▒Б",
        "change_lang_sector": "ЁЯФД р░нр░╛р░╖/р░╡р░┐р░нр░╛р░Чр░В р░ор░╛р░░р▒Нр░Ър░Вр░бр░┐",
        "current": "р░кр▒Нр░░р░╕р▒Нр░др▒Бр░др░ор▒Б",
        "uploader_any": "р░П р░лр▒Ир░▓р▒Н р░░р░Хр░ор▒Ир░ир░╛ р░Ер░кр▒Нр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐ (ЁЯУД р░кр░др▒Нр░░р░╛р░▓р▒Б + ЁЯЦ╝я╕П р░Ър░┐р░др▒Нр░░р░╛р░▓р▒Б)",
        "sample_doc_btn": "ЁЯУЭ р░ир░ор▒Вр░ир░╛ {sector} р░кр░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐",
        "sample_try": "р░лр▒Ир░│р▒Нр░▓р▒Б р░╕р░┐р░жр▒Нр░зр░Вр░Чр░╛ р░▓р▒Зр░Хр░кр▒Лр░др▒З р░ир░ор▒Вр░ир░╛ р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐",
        "extracting": "р░кр░╛р░ар▒Нр░пр░╛р░ир▒Нр░ир░┐ р░╡р▒Жр░▓р░┐р░Хр░┐р░др▒Ар░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ВтАж",
        "generating": "р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░гр░ир▒Б р░╕р▒Гр░╖р▒Нр░Яр░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ВтАж",
        "thinking": "р░Жр░▓р▒Лр░Ър░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б...",
        "no_text": "р░И р░лр▒Ир░▓р▒НтАМр░▓р▒Л р░Ър░жр░╡р░Чр░▓р░┐р░Чр▒З р░кр░╛р░ар▒Нр░пр░В р░Хр░ир░┐р░кр░┐р░Вр░Ър░▓р▒Зр░жр▒Б.",
        "analyzing_image": "ЁЯФН р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░В...",
        "image_analysis_header": "ЁЯЦ╝я╕П р░Ър░┐р░др▒Нр░░р░В р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "uploaded_image_caption": "р░Ер░кр▒Нр░▓р▒Лр░бр▒Н р░Ър▒Зр░╕р░┐р░и {sector} р░Ър░┐р░др▒Нр░░р░В",
        "extracting_image_text": "р░Ър░┐р░др▒Нр░░р░В р░ир▒Бр░Вр░бр░┐ р░кр░╛р░ар▒Нр░пр░╛р░ир▒Нр░ир░┐ р░╡р▒Жр░▓р░┐р░Хр░┐р░др▒Ар░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░В...",
        "enhanced_title_suffix": " р░▓р▒Жр░ир▒Нр░╕р▒Н тАУ р░Ер░зр▒Бр░ир░╛р░др░и AI р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "info_law": "ЁЯМН р░нр░╛р░╖: {lang_flag} {lang} | тЪЦя╕П р░╡р░┐р░нр░╛р░Чр░В: р░Ер░ир▒Нр░ир░┐ р░кр░др▒Нр░░р░╛р░▓ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "info_medical": "ЁЯМН р░нр░╛р░╖: {lang_flag} {lang} | ЁЯПе р░╡р░┐р░нр░╛р░Чр░В: р░╡р▒Ир░жр▒Нр░п р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г + р░Ер░др▒Нр░пр░╡р░╕р░░ р░╕р░╣р░╛р░пр░В + р░Ър░┐р░др▒Нр░░р░В р░ир░┐р░░р▒Нр░зр░╛р░░р░г",
        "info_agri": "ЁЯМН р░нр░╛р░╖: {lang_flag} {lang} | ЁЯМ╛ р░╡р░┐р░нр░╛р░Чр░В: р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г + р░кр░Вр░Я р░Ър░┐р░др▒Нр░░р░В р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б",
        "tab_doc": "ЁЯУД р░Ер░зр▒Бр░ир░╛р░др░и {sector} р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "tab_gen": "ЁЯзн р░╕р░╛р░зр░╛р░░р░г {sector} р░╕р░╣р░╛р░пр░В",
        "enhanced_analysis_header": "ЁЯУК р░Ер░зр▒Бр░ир░╛р░др░и {sector} р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "chat_about_analysis": "ЁЯТм р░И р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░Чр░Вр░бр░┐",
        "chat_placeholder": "р░И р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Пр░жр▒Ир░ир░╛ р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐...",
        "examples_try": "р░Зр░▓р░╛ р░Ер░бр░Чр░Вр░бр░┐:",
        "gen_help_header": "ЁЯзн р░╕р░╛р░зр░╛р░░р░г {sector} р░╕р░╣р░╛р░пр░В & р░╕р░▓р░╣р░╛",
        "gen_help_caption": "р░Пр░жр▒Ир░ир░╛ {sector_lower} р░╕р░Вр░мр░Вр░зр░┐р░д р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Ер░бр░Чр░Вр░бр░┐ тАФ р░╕р░╣р░╛р░пр░В р░Хр▒Лр░╕р░В р░╕р░┐р░жр▒Нр░зр░Вр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░ор▒Б!",
        "gen_chat_placeholder": "р░Пр░жр▒Ир░ир░╛ {sector_lower} р░кр▒Нр░░р░╢р▒Нр░и р░Ер░бр░Чр░Вр░бр░┐...",
        "examples_caption": "р░Йр░жр░╛р░╣р░░р░г р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б:",
        "enhanced_features_title": "ЁЯЪА р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б:",
        "features_med_1": "ЁЯЪи р░Ер░др▒Нр░пр░╡р░╕р░░ р░╡р▒Ир░жр▒Нр░п р░╕р▒Нр░кр░Вр░жр░и",
        "features_med_2": "ЁЯЦ╝я╕П р░╡р▒Ир░жр▒Нр░п р░Ър░┐р░др▒Нр░░р░В р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "features_med_3": "ЁЯй║ р░Чр░╛р░пр░В/р░╡р▒Нр░пр░╛р░зр░┐ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б",
        "features_agri_1": "ЁЯМ▒ р░кр░Вр░Я р░░р▒Лр░Чр░╛р░▓ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б",
        "features_agri_2": "ЁЯРЫ р░Хр▒Ар░Яр░Хр░╛р░▓р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░бр░В",
        "features_agri_3": "ЁЯУК р░Ър░┐р░др▒Нр░░р░╛р░▓ р░ир▒Бр░Вр░бр░┐ р░ор░Яр▒Нр░Яр░┐ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "features_law_1": "ЁЯУД р░Ер░ир▒Нр░ир░┐ р░кр░др▒Нр░░р░╛р░▓ р░░р░Хр░╛р░▓р▒Б",
        "features_law_2": "тЪЦя╕П р░Ър░Яр▒Нр░Я р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г",
        "features_law_3": "ЁЯФН р░╕р░ор░Чр▒Нр░░ р░╕р░ор▒Ар░Хр▒Нр░╖",
        "disclaimer_block_header": "тЪая╕П р░Чр░ор░ир░┐р░Х:",
        "disclaimer_med": "- р░╡р▒Ир░жр▒Нр░пр░В: р░Ер░др▒Нр░пр░╡р░╕р░░р░╛р░ир░┐р░Хр░┐ 108/102 р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐ (р░нр░╛р░░р░др░жр▒Зр░╢р░В)",
        "disclaimer_law": "- р░Ър░Яр▒Нр░Яр░В: р░ор▒Бр░Цр▒Нр░п р░╡р░┐р░╖р░пр░╛р░▓р░Хр▒Б р░ир▒Нр░пр░╛р░п р░ир░┐р░кр▒Бр░гр▒Бр░▓р░ир▒Б р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐",
        "disclaimer_agri": "- р░╡р▒Нр░пр░╡р░╕р░╛р░пр░В: р░╕р░┐р░лр░╛р░░р░╕р▒Бр░▓р▒Б р░╕р░╛р░зр░╛р░░р░гр░В тАФ р░╕р▒Нр░ер░╛р░ир░┐р░Х р░кр░░р░┐р░╕р▒Нр░ер░┐р░др▒Бр░▓р░ир▒Б р░кр░░р░┐р░Чр░гр░┐р░Вр░Ър░Вр░бр░┐",
        "disclaimer_footer": "- р░ор▒Бр░Цр▒Нр░п р░╕р░ор░╛р░Ър░╛р░░р░╛р░ир▒Нр░ир░┐ р░Ор░▓р▒Нр░▓р░кр▒Нр░кр▒Бр░бр▒В р░Ер░░р▒Нр░╣р▒Бр░▓р▒Ир░и р░ир░┐р░кр▒Бр░гр▒Бр░▓р░др▒Л р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐",
        "document": "р░кр░др▒Нр░░р░В",
        "analysis_summary": "ЁЯУС р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░╕р░╛р░░р░╛р░Вр░╢р░В"
    },
    "╪з╪▒╪п┘И": {
        "select_language": "ЁЯМН ╪з┘╛┘Ж█М ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        "choose_language": "╪м╪з╪▒█М ╪▒┌й┌╛┘Ж█Т ┌й█Т ┘Д█М█Т ╪з┘╛┘Ж█М ┘╛╪│┘Ж╪п ┌й█М ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        "choose_sector": "╪з┘╛┘Ж╪з ╪┤╪╣╪и█Б ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║",
        "selected_language": "┘Е┘Ж╪к╪о╪и ┌й╪▒╪п█Б ╪▓╪и╪з┘Ж",
        "back_language": "тЖР ╪▓╪и╪з┘Ж ┌й█Т ╪з┘Ж╪к╪о╪з╪и ┘╛╪▒ ┘И╪з┘╛╪│ ╪м╪з╪ж█М┌║",
        "settings": "тЪЩя╕П ╪к╪▒╪к█М╪и╪з╪к",
        "change_lang_sector": "ЁЯФД ╪▓╪и╪з┘Ж/╪┤╪╣╪и█Б ╪к╪и╪п█М┘Д ┌й╪▒█М┌║",
        "current": "┘Е┘И╪м┘И╪п█Б",
        "uploader_any": "┌й╪│█М ╪и┌╛█М ┘Б╪з╪ж┘Д ┌й█М ┘В╪│┘Е ╪з┘╛ ┘Д┘И┌И ┌й╪▒█М┌║ (ЁЯУД ╪п╪│╪к╪з┘И█М╪▓╪з╪к + ЁЯЦ╝я╕П ╪к╪╡╪з┘И█М╪▒)",
        "sample_doc_btn": "ЁЯУЭ ┘Ж┘Е┘И┘Ж█Б {sector} ╪п╪│╪к╪з┘И█М╪▓ ┘Д┘И┌И ┌й╪▒█М┌║",
        "sample_try": "╪з┌п╪▒ ┘Б╪з╪ж┘Д ╪п╪│╪к█М╪з╪и ┘Ж█Б█М┌║ █Б█Т ╪к┘И ┘Ж┘Е┘И┘Ж█Б ╪в╪▓┘Е╪з╪ж█М┌║",
        "extracting": "┘Е╪к┘Ж ┘Ж┌й╪з┘Д╪з ╪м╪з ╪▒█Б╪з █Б█ТтАж",
        "generating": "╪к╪м╪▓█М█Б ╪к█М╪з╪▒ ┌й█М╪з ╪м╪з ╪▒█Б╪з █Б█ТтАж",
        "thinking": "╪│┘И┌Ж╪з ╪м╪з ╪▒█Б╪з █Б█Т...",
        "no_text": "╪з┘╛ ┘Д┘И┌И ┌й█М ┌п╪ж█М ┘Б╪з╪ж┘Д ┘Е█М┌║ ┘╛┌С┌╛┘Ж█Т ┌й█Т ┘В╪з╪и┘Д ┘Е╪к┘Ж ┘Ж█Б█М┌║ ┘Е┘Д╪з█Ф",
        "analyzing_image": "ЁЯФН ╪к╪╡┘И█М╪▒ ┌й╪з ╪к╪м╪▓█М█Б █Б┘И ╪▒█Б╪з █Б█Т...",
        "image_analysis_header": "ЁЯЦ╝я╕П ╪к╪╡┘И█М╪▒ ┌й╪з ╪к╪м╪▓█М█Б",
        "uploaded_image_caption": "╪з┘╛ ┘Д┘И┌И ┌й█М ┌п╪ж█М {sector} ╪к╪╡┘И█М╪▒",
        "extracting_image_text": "╪к╪╡┘И█М╪▒ ╪│█Т ┘Е╪к┘Ж ┘Ж┌й╪з┘Д╪з ╪м╪з ╪▒█Б╪з █Б█Т...",
        "enhanced_title_suffix": " ┘Д█М┘Ж╪│ тАУ ╪м╪п█М╪п AI ╪к╪м╪▓█М█Б",
        "info_law": "ЁЯМН ╪▓╪и╪з┘Ж: {lang_flag} {lang} | тЪЦя╕П ╪┤╪╣╪и█Б: ╪к┘Е╪з┘Е ╪п╪│╪к╪з┘И█М╪▓█М ╪з┘В╪│╪з┘Е ┌й╪з ╪к╪м╪▓█М█Б",
        "info_medical": "ЁЯМН ╪▓╪и╪з┘Ж: {lang_flag} {lang} | ЁЯПе ╪┤╪╣╪и█Б: ╪╖╪и█М ╪к╪м╪▓█М█Б + █Б┘Ж┌п╪з┘Е█М ┘Е╪п╪п + ╪к╪╡┘И█М╪▒ ┌й█М ╪к╪┤╪о█М╪╡",
        "info_agri": "ЁЯМН ╪▓╪и╪з┘Ж: {lang_flag} {lang} | ЁЯМ╛ ╪┤╪╣╪и█Б: ╪▓╪▒╪╣█М ╪к╪м╪▓█М█Б + ┘Б╪╡┘Д ┌й█М ╪к╪╡┘И█М╪▒ ┌й█М ╪┤┘Ж╪з╪о╪к",
        "tab_doc": "ЁЯУД ╪м╪п█М╪п {sector} ╪к╪м╪▓█М█Б",
        "tab_gen": "ЁЯзн ╪╣┘Е┘И┘Е█М {sector} ┘Е╪п╪п",
        "enhanced_analysis_header": "ЁЯУК ╪м╪п█М╪п {sector} ╪к╪м╪▓█М█Б",
        "chat_about_analysis": "ЁЯТм ╪з╪│ ╪к╪м╪▓█М█Б ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ╪│┘И╪з┘Д╪з╪к ┘╛┘И┌Ж┌╛█М┌║",
        "chat_placeholder": "╪з╪│ ╪к╪м╪▓█М█Б ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ┌й┘И╪ж█М ╪и┌╛█М ╪│┘И╪з┘Д ┘╛┘И┌Ж┌╛█М┌║...",
        "examples_try": "┘╛┘И┌Ж┌╛ ┌й╪▒ ╪п█М┌й┌╛█М┌║:",
        "gen_help_header": "ЁЯзн ╪╣┘Е┘И┘Е█М {sector} ┘Е╪п╪п ╪з┘И╪▒ ┘Е╪┤╪з┘И╪▒╪к",
        "gen_help_caption": "┌й╪│█М ╪и┌╛█М {sector_lower} ╪│█Т ┘Е╪к╪╣┘Д┘В ╪│┘И╪з┘Д╪з╪к ┘╛┘И┌Ж┌╛█М┌║ тАФ ┘Е╪п╪п ┌й█Т ┘Д█М█Т ┘Е┘И╪м┘И╪п!",
        "gen_chat_placeholder": "┌й┘И╪ж█М ╪и┌╛█М {sector_lower} ╪│┘И╪з┘Д ┘╛┘И┌Ж┌╛█М┌║...",
        "examples_caption": "┘Е╪л╪з┘Д█М ╪│┘И╪з┘Д╪з╪к:",
        "enhanced_features_title": "ЁЯЪА ╪м╪п█М╪п ╪о╪╡┘И╪╡█М╪з╪к:",
        "features_med_1": "ЁЯЪи █Б┘Ж┌п╪з┘Е█М ╪╖╪и█М ╪▒╪п┘Р╪╣┘Е┘Д",
        "features_med_2": "ЁЯЦ╝я╕П ╪╖╪и█М ╪к╪╡┘И█М╪▒ ┌й╪з ╪к╪м╪▓█М█Б",
        "features_med_3": "ЁЯй║ ┌Ж┘И┘╣/╪и█М┘Е╪з╪▒█М ┌й█М ╪┤┘Ж╪з╪о╪к",
        "features_agri_1": "ЁЯМ▒ ┘Б╪╡┘Д ┌й█М ╪и█М┘Е╪з╪▒█М ┌й█М ╪┤┘Ж╪з╪о╪к",
        "features_agri_2": "ЁЯРЫ ┌й█М┌С┘И┌║ ┌й█М ╪┤┘Ж╪з╪о╪к",
        "features_agri_3": "ЁЯУК ╪к╪╡╪з┘И█М╪▒ ╪│█Т ┘Е┘╣█М ┌й╪з ╪к╪м╪▓█М█Б",
        "features_law_1": "ЁЯУД ╪к┘Е╪з┘Е ╪п╪│╪к╪з┘И█М╪▓╪з╪к█М ╪з┘В╪│╪з┘Е",
        "features_law_2": "тЪЦя╕П ┘В╪з┘Ж┘И┘Ж█М ╪к╪м╪▓█М█Б",
        "features_law_3": "ЁЯФН ╪м╪з┘Е╪╣ ╪м╪з╪ж╪▓█Б",
        "disclaimer_block_header": "тЪая╕П ╪з┘Ж╪к╪и╪з█Б:",
        "disclaimer_med": "- ╪╖╪и█М: █Б┘Ж┌п╪з┘Е█М ╪╡┘И╪▒╪к ┘Е█М┌║ 108/102 ┘╛╪▒ ┌й╪з┘Д ┌й╪▒█М┌║ (╪и┌╛╪з╪▒╪к)",
        "disclaimer_law": "- ┘В╪з┘Ж┘И┘Ж█М: ╪з█Б┘Е ┘Е╪╣╪з┘Е┘Д╪з╪к ┘Е█М┌║ ┘Е╪│╪к┘Ж╪п ┘В╪з┘Ж┘И┘Ж█М ┘Е╪з█Б╪▒ ╪│█Т ╪▒╪м┘И╪╣ ┌й╪▒█М┌║",
        "disclaimer_agri": "- ╪▓╪▒╪╣█М: ╪│┘Б╪з╪▒╪┤╪з╪к ╪╣┘Е┘И┘Е█М █Б█М┌║ тАФ ┘Е┘В╪з┘Е█М ╪н╪з┘Д╪з╪к ┌й┘И ┘Е╪п┘Ж╪╕╪▒ ╪▒┌й┌╛█М┌║",
        "disclaimer_footer": "- ╪з█Б┘Е ┘Е╪╣┘Д┘И┘Е╪з╪к █Б┘Е█М╪┤█Б ┘Е╪│╪к┘Ж╪п ┘Е╪з█Б╪▒█М┘Ж ╪│█Т ╪к╪╡╪п█М┘В ┌й╪▒█М┌║",
        "document": "╪п╪│╪к╪з┘И█М╪▓",
        "analysis_summary": "ЁЯУС ╪к╪м╪▓█М█Б ┌й╪з ╪о┘Д╪з╪╡█Б"
    },
    "р┤ор┤▓р┤пр┤╛р┤│р┤В": {
        "select_language": "ЁЯМН р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х",
        "choose_language": "р┤др╡Бр┤Яр┤░р┤╛р╡╗ р┤Зр┤╖р╡Нр┤Яр┤ор╡Бр┤│р╡Нр┤│ р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х",
        "choose_sector": "р┤╡р┤┐р┤нр┤╛р┤Чр┤В р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х",
        "selected_language": "р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤др╡Нр┤д р┤нр┤╛р┤╖",
        "back_language": "тЖР р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤кр╡Нр┤кр┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤ор┤Яр┤Щр╡Нр┤Щр╡Бр┤Х",
        "settings": "тЪЩя╕П р┤Хр╡Нр┤░р┤ор╡Ар┤Хр┤░р┤гр┤Щр╡Нр┤Щр╡╛",
        "change_lang_sector": "ЁЯФД р┤нр┤╛р┤╖/р┤╡р┤┐р┤нр┤╛р┤Чр┤В р┤ор┤╛р┤▒р╡Нр┤▒р╡Бр┤Х",
        "current": "р┤ир┤┐р┤▓р┤╡р┤┐р╡╜",
        "uploader_any": "р┤Пр┤др╡Н р┤лр┤пр╡╜ р┤др┤░р┤В р┤╡р╡Зр┤гр┤ор╡Жр┤Щр╡Нр┤Хр┤┐р┤▓р╡Бр┤В р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х (ЁЯУД р┤░р╡Зр┤Цр┤Хр╡╛ + ЁЯЦ╝я╕П р┤Ър┤┐р┤др╡Нр┤░р┤Щр╡Нр┤Щр╡╛)",
        "sample_doc_btn": "ЁЯУЭ р┤╕р┤╛р┤ор╡Нр┤кр┤┐р╡╛ {sector} р┤░р╡Зр┤Ц р┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
        "sample_try": "р┤лр┤пр╡╜ р┤Зр┤▓р╡Нр┤▓р╡Жр┤Щр╡Нр┤Хр┤┐р╡╜ р┤╕р┤╛р┤ор╡Нр┤кр┤┐р╡╛ р┤кр┤░р╡Ар┤Хр╡Нр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "extracting": "р┤Яр╡Жр┤Хр╡Нр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Ор┤Яр╡Бр┤др╡Нр┤др╡Бр┤Хр╡Кр┤гр╡Нр┤Яр┤┐р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡БтАж",
        "generating": "р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В р┤╕р╡Гр┤╖р╡Нр┤Яр┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡БтАж",
        "thinking": "р┤Ър┤┐р┤ир╡Нр┤др┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б...",
        "no_text": "р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤д р┤лр┤пр┤▓р┤┐р╡╜ р┤╡р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤кр┤▒р╡Нр┤▒р╡Бр┤ир╡Нр┤и р┤Яр╡Жр┤Хр╡Нр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤╛р┤ир┤╛р┤пр┤┐р┤▓р╡Нр┤▓.",
        "analyzing_image": "ЁЯФН р┤Ър┤┐р┤др╡Нр┤░р┤В р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤ир╡Нр┤ир╡Б...",
        "image_analysis_header": "ЁЯЦ╝я╕П р┤Ър┤┐р┤др╡Нр┤░р┤В р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "uploaded_image_caption": "р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н р┤Ър╡Жр┤пр╡Нр┤д {sector} р┤Ър┤┐р┤др╡Нр┤░р┤В",
        "extracting_image_text": "р┤Ър┤┐р┤др╡Нр┤░р┤др╡Нр┤др┤┐р╡╜ р┤ир┤┐р┤ир╡Нр┤ир╡Н р┤Яр╡Жр┤Хр╡Нр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Ор┤Яр╡Бр┤др╡Нр┤др╡Бр┤Хр╡Кр┤гр╡Нр┤Яр┤┐р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б...",
        "enhanced_title_suffix": " р┤▓р╡Жр╡╗р┤╕р╡Н тАУ р┤Йр┤пр╡╝р┤ир╡Нр┤и р┤ир┤┐р┤▓р┤╡р┤╛р┤░р┤ор╡Бр┤│р╡Нр┤│ AI р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "info_law": "ЁЯМН р┤нр┤╛р┤╖: {lang_flag} {lang} | тЪЦя╕П р┤╡р┤┐р┤нр┤╛р┤Чр┤В: р┤Ор┤▓р╡Нр┤▓р┤╛ р┤░р╡Зр┤Цр┤Хр┤│р╡Бр┤Яр╡Жр┤пр╡Бр┤В р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "info_medical": "ЁЯМН р┤нр┤╛р┤╖: {lang_flag} {lang} | ЁЯПе р┤╡р┤┐р┤нр┤╛р┤Чр┤В: р┤ор╡Жр┤бр┤┐р┤Хр╡Нр┤Хр╡╜ р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В + р┤Ер┤Яр┤┐р┤пр┤ир╡Нр┤др┤░ р┤╕р┤╣р┤╛р┤пр┤В + р┤Ър┤┐р┤др╡Нр┤░р┤В р┤ир┤┐р╡╝р┤гр┤пр┤В",
        "info_agri": "ЁЯМН р┤нр┤╛р┤╖: {lang_flag} {lang} | ЁЯМ╛ р┤╡р┤┐р┤нр┤╛р┤Чр┤В: р┤Хр┤╛р╡╝р┤╖р┤┐р┤Х р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В + р┤╡р┤┐р┤│ р┤Ър┤┐р┤др╡Нр┤░ р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜",
        "tab_doc": "ЁЯУД р┤Йр┤пр╡╝р┤ир╡Нр┤и р┤ир┤┐р┤▓р┤╡р┤╛р┤░р┤ор╡Бр┤│р╡Нр┤│ {sector} р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "tab_gen": "ЁЯзн р┤кр╡Кр┤др╡Бр┤╡р┤╛р┤п {sector} р┤╕р┤╣р┤╛р┤пр┤В",
        "enhanced_analysis_header": "ЁЯУК р┤Йр┤пр╡╝р┤ир╡Нр┤и р┤ир┤┐р┤▓р┤╡р┤╛р┤░р┤ор╡Бр┤│р╡Нр┤│ {sector} р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "chat_about_analysis": "ЁЯТм р┤И р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤др╡Нр┤др╡Ж р┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "chat_placeholder": "р┤И р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤др╡Нр┤др╡Ж р┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤Пр┤др╡Жр┤Щр╡Нр┤Хр┤┐р┤▓р╡Бр┤В р┤Ър╡Лр┤жр╡Нр┤пр┤ор╡Бр┤гр╡Нр┤Яр╡Л...",
        "examples_try": "р┤Зр┤Щр╡Нр┤Щр┤ир╡Ж р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х:",
        "gen_help_header": "ЁЯзн р┤кр╡Кр┤др╡Бр┤╡р┤╛р┤п {sector} р┤╕р┤╣р┤╛р┤пр┤╡р╡Бр┤В р┤ир┤┐р╡╝р┤жр╡Зр┤╢р┤╡р╡Бр┤В",
        "gen_help_caption": "{sector_lower} р┤╕р┤Вр┤мр┤ир╡Нр┤зр┤ор┤╛р┤п р┤Пр┤др╡Жр┤Щр╡Нр┤Хр┤┐р┤▓р╡Бр┤В р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х тАФ р┤╕р┤╣р┤╛р┤пр┤др╡Нр┤др┤┐р┤ир┤╛р┤пр┤┐ р┤др┤пр╡Нр┤пр┤╛р┤▒р┤╛р┤гр╡Н!",
        "gen_chat_placeholder": "р┤Пр┤др╡Жр┤Щр╡Нр┤Хр┤┐р┤▓р╡Бр┤В {sector_lower} р┤Ър╡Лр┤жр╡Нр┤пр┤В р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...",
        "examples_caption": "р┤Йр┤жр┤╛р┤╣р┤░р┤г р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛:",
        "enhanced_features_title": "ЁЯЪА р┤╡р┤┐р┤╢р╡Зр┤╖р┤Чр╡Бр┤гр┤Щр╡Нр┤Щр╡╛:",
        "features_med_1": "ЁЯЪи р┤Ер┤Яр┤┐р┤пр┤ир╡Нр┤др┤┐р┤░ р┤ор╡Жр┤бр┤┐р┤Хр╡Нр┤Хр╡╜ р┤кр╡Нр┤░р┤др┤┐р┤Хр┤░р┤гр┤В",
        "features_med_2": "ЁЯЦ╝я╕П р┤ор╡Жр┤бр┤┐р┤Хр╡Нр┤Хр╡╜ р┤Ър┤┐р┤др╡Нр┤░ р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "features_med_3": "ЁЯй║ р┤кр┤░р┤┐р┤Хр╡Нр┤Хр╡Н/р┤░р╡Лр┤Чр┤В р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜",
        "features_agri_1": "ЁЯМ▒ р┤╡р┤┐р┤│ р┤░р╡Лр┤Чр┤В р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜",
        "features_agri_2": "ЁЯРЫ р┤Хр╡Ар┤Яр┤В р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр╡╜",
        "features_agri_3": "ЁЯУК р┤Ър┤┐р┤др╡Нр┤░р┤Щр╡Нр┤Щр┤│р┤┐р╡╜ р┤ир┤┐р┤ир╡Нр┤ир╡Н р┤ор┤гр╡Нр┤гр╡Н р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "features_law_1": "ЁЯУД р┤Ор┤▓р╡Нр┤▓р┤╛ р┤░р╡Зр┤Цр┤╛ р┤др┤░р┤В",
        "features_law_2": "тЪЦя╕П р┤ир┤┐р┤пр┤о р┤╡р┤┐р┤╢р┤Хр┤▓р┤ир┤В",
        "features_law_3": "ЁЯФН р┤╕р┤ор┤Чр╡Нр┤░ р┤Ер┤╡р┤▓р╡Лр┤Хр┤ир┤В",
        "disclaimer_block_header": "тЪая╕П р┤Ер┤▒р┤┐р┤пр┤┐р┤кр╡Нр┤кр╡Н:",
        "disclaimer_med": "- р┤ор╡Жр┤бр┤┐р┤Хр╡Нр┤Хр╡╜: р┤Ер┤Яр┤┐р┤пр┤ир╡Нр┤др┤┐р┤░р┤╛р┤╡р┤╕р╡Нр┤ер┤пр┤┐р╡╜ 108/102 р┤╡р┤┐р┤│р┤┐р┤Хр╡Нр┤Хр╡В (р┤Зр┤ир╡Нр┤др╡Нр┤п)",
        "disclaimer_law": "- р┤ир┤┐р┤пр┤ор┤В: р┤кр╡Нр┤░р┤зр┤╛р┤и р┤Хр┤╛р┤░р╡Нр┤пр┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр╡Н р┤пр╡Лр┤Чр╡Нр┤пр┤ир┤╛р┤п р┤ир┤┐р┤пр┤о р┤╡р┤┐р┤жр┤Чр╡Нр┤зр┤ир╡Лр┤Яр╡Н р┤Ър╡Зр┤Хр╡Нр┤Хр╡Вр┤▒р╡Бр┤Х",
        "disclaimer_agri": "- р┤Хр┤╛р╡╝р┤╖р┤┐р┤Хр┤В: р┤ир┤┐р╡╝р┤жр╡Зр┤╢р┤Щр╡Нр┤Щр╡╛ р┤кр╡Кр┤др╡Бр┤╡р┤╛р┤пр┤др┤╛р┤гр╡Н тАФ р┤кр╡Нр┤░р┤╛р┤жр╡Зр┤╢р┤┐р┤Х р┤╕р┤╛р┤╣р┤Ър┤░р╡Нр┤пр┤Щр╡Нр┤Щр╡╛ р┤кр┤░р┤┐р┤Чр┤гр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "disclaimer_footer": "- р┤кр╡Нр┤░р┤зр┤╛р┤и р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛ р┤Ор┤кр╡Нр┤кр╡Лр┤┤р╡Бр┤В р┤пр╡Лр┤Чр╡Нр┤пр┤ир┤╛р┤п р┤╡р┤┐р┤жр┤Чр╡Нр┤зр┤░р╡Бр┤ор┤╛р┤пр┤┐ р┤╕р╡Нр┤ер┤┐р┤░р╡Ар┤Хр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
        "document": "р┤░р╡Зр┤Ц",
        "analysis_summary": "ЁЯУС р┤╡р┤┐р┤╢р┤Хр┤▓р┤и р┤╕р┤Вр┤Чр╡Нр┤░р┤╣р┤В"
    },
}

def get_text(key: str) -> str:
    lang = st.session_state.get("selected_language", "English")
    return UI_TRANSLATIONS.get(lang, UI_TRANSLATIONS["English"]).get(key, UI_TRANSLATIONS["English"].get(key, key))

def pick_tts_code(lang_name: str) -> str:
    return LANG_CODE_MAP_TTS.get(lang_name, "en")

def pick_ocr_code() -> str:
    pref = st.session_state.get("selected_language", "English")
    return LANG_CODE_MAP_OCR.get(pref, "eng")

# -------------------------------------------------
# Sector-aware Color Palettes + Accessible, Colorful CSS
# -------------------------------------------------
PALETTES = {
    "Law":        {"brand": "#7C3AED", "brand2": "#75AED7", "bg1": "#EDE9FE", "bg2": "#CFFAFE"},
    "Medical":    {"brand": "#10B981", "brand2": "#06B6D4", "bg1": "#D1FAE5", "bg2": "#60CCD5"},
    "Agriculture":{"brand": "#16A34A", "brand2": "#F59E0B", "bg1": "#DCFCE7", "bg2": "#FEF3C7"},
}
active_sector = st.session_state.get("selected_sector", "Law")
pal = PALETTES.get(active_sector, PALETTES["Law"])

# Accessible, high-contrast CSS (UI-only)
st.markdown(f"""
<style>
/* Force readable light scheme and strong foreground */
html {{ color-scheme: light; }}
:root {{
  --brand: {pal["brand"]};
  --brand-2: {pal["brand2"]};
  --bg-grad-1: {pal["bg1"]};
  --bg-grad-2: {pal["bg2"]};
  --text: #0F172A;              /* Dark slate for high contrast */
  --text-weak: #334155;
  --surface: #ffffff;
  --border: #E5E7EB;
}}
/* Background stays colorful but subtle */
.stApp {{
  background:
    radial-gradient(1200px 600px at 10% 0%, var(--bg-grad-1), transparent 60%),
    radial-gradient(1000px 500px at 100% 10%, var(--bg-grad-2), transparent 60%),
    linear-gradient(180deg, #ffffff 0%, #f8fafc 100%);
}}
/* GLOBAL TYPOGRAPHY: remove transparent gradient text and ensure solid color */
html, body, [class*="css"] {{
  font-family: "Inter","Poppins","Noto Sans","Noto Sans Telugu","Noto Sans Devanagari","Noto Sans Malayalam",
               system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial,"Noto Color Emoji","Apple Color Emoji","Segoe UI Emoji",sans-serif !important;
  color: var(--text);
}}
h1, h2, h3, h4, h5, h6 {{
  color: var(--text) !important;     /* critical: readable headings */
  font-weight: 700;
  letter-spacing: -0.01em;
  text-shadow: none;
}}
/* Optional: subtle underline accent instead of gradient-filled text */
.h-accent {{ position: relative; }}
.h-accent:after {{
  content: "";
  position: absolute; left: 0; bottom: -6px; height: 4px; width: 80px;
  border-radius: 999px;
  background: linear-gradient(90deg, var(--brand), var(--brand-2));
}}
/* BUTTONS: keep vibrant gradients */
div.stButton > button {{
  background: linear-gradient(135deg, var(--brand), var(--brand-2));
  color: #fff !important;
  border: none; border-radius: 14px;
  padding: 0.9rem 1.1rem;
  box-shadow: 0 8px 24px rgba(0,0,0,.12);
  transition: transform .15s ease, box-shadow .15s ease, filter .2s ease;
}}
div.stButton > button:hover {{
  transform: translateY(-1px);
  box-shadow: 0 12px 30px rgba(0,0,0,.18);
  filter: brightness(1.03);
}}
/* TABS: readable default + white on selected */
.stTabs [role="tablist"] {{ gap: 8px; }}
.stTabs [role="tablist"] button {{
  background: #fff; color: var(--text);
  border-radius: 12px; border: 1px solid var(--border);
  padding: .6rem 1rem;
}}
.stTabs [role="tab"][aria-selected="true"] {{
  background: linear-gradient(135deg, var(--brand), var(--brand-2));
  color: #fff !important; border-color: transparent !important;
}}
/* INFO/WARNING banners: high-contrast text on soft surface */
.stAlert > div {{
  background: #ffffff;          /* solid surface for legibility */
  border-left: 6px solid var(--brand);
  border-radius: 12px;
  color: var(--text) !important;
}}
/* FILE UPLOADER: lighten the dropzone and labels */
[data-testid="stFileUploader"] > section {{
  background: #FFFFFF; border: 1px dashed var(--border) !important;
  border-radius: 14px;
}}
[data-testid="stFileUploader"] * {{ color: var(--text) !important; }}
/* TEXT INPUTS / AREAS: clear borders and readable placeholders */
.stTextInput > div > div input,
.stTextArea > div > textarea {{
  color: var(--text) !important;
  border-radius: 12px; border: 1px solid var(--border);
  transition: border-color .2s ease, box-shadow .2s ease;
}}
.stTextInput > div > div input::placeholder,
.stTextArea > div > textarea::placeholder {{ color: var(--text-weak) !important; opacity: 1; }}
.stTextInput > div > div input:focus,
.stTextArea > div > textarea:focus {{
  border-color: var(--brand);
  box-shadow: 0 0 0 3px color-mix(in srgb, var(--brand) 25%, transparent);
}}
/* IMAGES/CARDS: soft elevation */
img {{ border-radius: 12px; box-shadow: 0 8px 24px rgba(0,0,0,.08); }}
.kpi-card {{
  padding: 1rem 1.25rem; background: #ffffff;
  border: 1px solid var(--border); border-radius: 14px;
  box-shadow: 0 10px 24px rgba(0,0,0,.05);
}}
/* BADGES/CHIPS */
.badge {{
  display: inline-block; padding: .25rem .6rem; border-radius: 999px;
  color: #fff; background: linear-gradient(135deg, var(--brand), var(--brand-2));
  font-size: .8rem;
}}
/* Separate sections subtly */
.hr-soft {{ margin: .8rem 0 1rem 0; border: none; height: 1px;
  background: linear-gradient(90deg, transparent, #e5e7eb, transparent); }}
</style>
""", unsafe_allow_html=True)

# -------------------------------------------------
# OCR / Tesseract
# -------------------------------------------------
pytesseract.pytesseract.tesseract_cmd = os.getenv(
    "TESSERACT_PATH",
    r"C:\Program Files\Tesseract-OCR\tesseract.exe"
)

# -------------------------------------------------
# AI Helpers
# -------------------------------------------------
def analyze_image_with_ai(image_bytes: bytes, sector: str, language: str, query: str | None = None) -> str:
    image_base64 = base64.b64encode(image_bytes).decode('utf-8')
    image_part = {"mime_type": "image/jpeg", "data": image_base64}
    if sector == "Medical":
        if query and any(k in (query or "").lower() for k in ["emergency","urgent","injury","bleeding","pain","burn","wound"]):
            prompt = f"""
ЁЯЪи MEDICAL IMAGE ANALYSIS - EMERGENCY MODE ЁЯЪи
Respond immediately in {language} with:
1) Emergency assessment 2) Visual observations 3) Immediate actions 4) Emergency services 5) First aid 6) When to seek care
User query: {query or "Analyze this medical image"}
"""
        else:
            prompt = f"You are MedLens. Analyze this medical image in {language}: observations, possible conditions, actions, and when to seek help."
    elif sector == "Agriculture":
        prompt = f"You are AgroLens. Analyze this agricultural image in {language}: identification, problems, solutions, and prevention."
    else:
        prompt = f"You are LawLens. Analyze this legal document image in {language}: doc type, key elements/clauses, and next steps."
    try:
        response = vision_model.generate_content([prompt, image_part])
        return response.text
    except Exception as e:
        return f"Error analyzing image: {str(e)}"

def get_sector_prompt(sector: str, mode: str = "summary") -> str:
    prompts = {
        "Law": {
            "summary": "You are LawLens тЪЦя╕П, a legal document explainer. Analyze ALL types of documents.",
            "chat": "You are LawLens тЪЦя╕П, a legal assistant. Answer questions about ANY documents and legal matters.",
            "general": "You are LawLens тЪЦя╕П, a legal guide. Provide legal information and procedures."
        },
        "Medical": {
            "summary": "You are MedLens ЁЯПе, a medical document explainer. ONLY analyze medical documents.",
            "chat": "You are MedLens ЁЯПе, a medical assistant. ONLY answer medical questions.",
            "general": "You are MedLens ЁЯПе, a medical guide. ONLY provide medical information."
        },
        "Agriculture": {
            "summary": "You are AgroLens ЁЯМ╛, an agricultural document explainer. ONLY analyze agricultural documents.",
            "chat": "You are AgroLens ЁЯМ╛, an agricultural assistant. ONLY answer agriculture questions.",
            "general": "You are AgroLens ЁЯМ╛, an agricultural guide. ONLY provide farming information."
        }
    }
    return prompts.get(sector, prompts["Law"]).get(mode, prompts["Law"]["summary"])

def ask_ai(document_text: str | None = None, query: str | None = None, mode: str = "summary", image_bytes: bytes | None = None) -> str:
    sector = st.session_state.selected_sector
    language = st.session_state.selected_language

    # тЬЕ Always fall back to stored doc_text
    if not document_text:
        document_text = st.session_state.get("doc_text", "")

    if image_bytes:
        return analyze_image_with_ai(image_bytes, sector, language, query)

    critical_medical_keywords = [
        "emergency","urgent","critical","severe","chest pain","heart attack","stroke","bleeding","unconscious",
        "poisoning","overdose","suicide","difficulty breathing","allergic reaction","seizure","trauma","fracture",
        "high fever","blood pressure","diabetes","insulin","medication error","swelling","rash","infection","wound",
        "burn","accident","injury","broken bone","cut","deep wound","heavy bleeding","choking","anaphylaxis","cardiac",
        "respiratory","faint"
    ]
    is_medical_emergency = any(k in (query or "").lower() for k in critical_medical_keywords)

    if is_medical_emergency:
        emergency_prompt = f"""
ЁЯЪи MEDICAL EMERGENCY OVERRIDE ЁЯЪи
Respond in {language} with warning, basic guidance, when to seek help, and disclaimer.
User query: {query}
Document context: {document_text or "No document provided"}
"""
        response = model.generate_content(emergency_prompt, generation_config={"temperature": 0.3, "max_output_tokens": 1000})
        return f"ЁЯЪи MEDICAL EMERGENCY RESPONSE ЁЯЪи\n{response.text}\n\nтЪая╕П If life-threatening, contact emergency services (108/102 in India, 911 in US) immediately."

    if sector == "Law":
        sector_restriction = "You are in the Law sector. You can analyze and help with ANY type of document needing legal review."
    elif sector != "Medical":
        sector_restriction = f"CRITICAL: Provide only {sector.lower()}-related information."
    else:
        sector_restriction = "Provide comprehensive medical guidance and information."

    lang_clause = f"Respond ONLY in {language}."
    base_prompt = get_sector_prompt(sector, mode)

    if mode == "summary":
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}
Analyze this document in {language}:
- Summary
- Key findings/obligations
- Important dates/recommendations
- Risks
Document:
{document_text}
"""
    elif mode == "chat":
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}
Document context:
{document_text}
User question: {query}
"""
    else:
        prompt = f"""{base_prompt}
{lang_clause}
{sector_restriction}
User question: {query}
"""
    response = model.generate_content(prompt, generation_config={"temperature": 0.7, "max_output_tokens": 800})
    return response.text

# -------------------------------------------------
# TTS
# -------------------------------------------------
def clean_text(text: str) -> str:
    emoji_pattern = re.compile(
        "[" +
        u"\U0001F600-\U0001F64F" +
        u"\U0001F300-\U0001F5FF" +
        u"\U0001F680-\U0001F6FF" +
        u"\U0001F1E0-\U0001F1FF" +
        u"\U00002700-\U000027BF" +
        u"\U0001F900-\U0001F9FF" +
        u"\U00002600-\U000026FF" +
        u"\U00002B00-\U00002BFF" +
        "]+", flags=re.UNICODE
    )
    text = emoji_pattern.sub(r'', text)
    text = re.sub(r'(\*\*|__|\*|_|#+)', '', text)
    return text.strip()

def tts_speak_toggle(text: str, lang_name: str):
    safe_text = clean_text(text)
    lang_code = pick_tts_code(lang_name)
    try:
        tts = gTTS(text=safe_text, lang=lang_code, slow=False)
        audio_buffer = io.BytesIO()
        tts.write_to_fp(audio_buffer)
        audio_buffer.seek(0)
        st.audio(audio_buffer.getvalue(), format='audio/mp3')
    except Exception as e:
        st.error(f"TTS generation failed: {e}")

# -------------------------------------------------
# OCR
# -------------------------------------------------
@st.cache_data(show_spinner=False, ttl=3600)
def ocr_image_bytes(img_bytes: bytes, lang_code: str) -> str:
    try:
        img = Image.open(io.BytesIO(img_bytes))
        txt = pytesseract.image_to_string(img, lang=lang_code).strip()
        return txt
    except Exception as e:
        return f"__OCR_ERROR__ {e}"

def preprocess_pil(img: Image.Image) -> Image.Image:
    if img.mode != "RGB":
        img = img.convert("RGB")
    return img

# -------------------------------------------------
# Extraction
# -------------------------------------------------
def extract_text_from_pdf(uploaded_file) -> str:
    try:
        uploaded_file.seek(0)
        pdf = PyPDF2.PdfReader(uploaded_file)
        txt = "\n".join((p.extract_text() or "") for p in pdf.pages).strip()
        if len(txt) > 20:
            return txt
    except Exception as e:
        st.warning(f"PyPDF2 failed: {e}")
    lang_code = pick_ocr_code()
    try:
        uploaded_file.seek(0)
        import pdf2image
        images = pdf2image.convert_from_bytes(uploaded_file.read(), dpi=300, first_page=1, last_page=10)
        out = []
        bar = st.progress(0.0)
        for i, im in enumerate(images, 1):
            im = preprocess_pil(im)
            buf = io.BytesIO()
            im.save(buf, format="PNG")
            page_bytes = buf.getvalue()
            text = ocr_image_bytes(page_bytes, lang_code)
            if not text.startswith("__OCR_ERROR__"):
                out.append(text)
            bar.progress(i/len(images))
        bar.empty()
        combined = "\n".join(out).strip()
        if combined:
            return combined
    except Exception as e:
        st.info(f"pdf2image/OCR skipped: {e}")
    st.error(get_text("no_text"))
    return ""

def extract_text_from_docx(f):
    try:
        return "\n".join(p.text for p in docx.Document(f).paragraphs).strip()
    except Exception as e:
        st.error(f"DOCX read error: {e}")
        return ""

def extract_text_from_image(f):
    try:
        img = Image.open(f)
        img = preprocess_pil(img)
        buf = io.BytesIO()
        img.save(buf, format="PNG")
        lang_code = pick_ocr_code()
        txt = ocr_image_bytes(buf.getvalue(), lang_code)
        if txt and not txt.startswith("__OCR_ERROR__"):
            return txt
        if txt.startswith("__OCR_ERROR__"):
            st.error(txt.replace("__OCR_ERROR__", "OCR error:"))
    except Exception as e:
        st.error(f"OCR image error: {e}")
    return ""

def extract_text(file):
    if not file:
        return ""
    ext = file.name.lower().split(".")[-1]
    if ext == "pdf":
        return extract_text_from_pdf(file)
    elif ext == "docx":
        return extract_text_from_docx(file)
    elif ext in ("jpg", "jpeg", "png"):
        return extract_text_from_image(file)
    elif ext == "txt":
        return file.read().decode("utf-8", errors="ignore")
    else:
        st.error("Unsupported file type")
        return ""

# -------------------------------------------------
# Examples
# -------------------------------------------------
EXAMPLE_DOC_Q = {
    "Law": {
        "English": ["Is this contract valid?", "What are my rights?", "What should I be careful about?"],
        "рд╣рд┐рдВрджреА": ["рдХреНрдпрд╛ рдпрд╣ рдЕрдиреБрдмрдВрдз рд╡реИрдз рд╣реИ?", "рдореЗрд░реЗ рдЕрдзрд┐рдХрд╛рд░ рдХреНрдпрд╛ рд╣реИрдВ?", "рдореБрдЭреЗ рдХрд┐рд╕ рдмрд╛рдд рдХрд╛ рдзреНрдпрд╛рди рд░рдЦрдирд╛ рдЪрд╛рд╣рд┐рдП?"],
        "р░др▒Жр░▓р▒Бр░Чр▒Б": ["р░И р░Тр░кр▒Нр░кр░Вр░жр░В р░Ър▒Жр░▓р▒Нр░▓р▒Бр░мр░╛р░Яр▒Бр░Чр░╛ р░Йр░Вр░жр░╛?", "р░ир░╛ р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б р░Пр░ор░┐р░Яр░┐?", "р░ир▒Зр░ир▒Б р░П р░╡р░┐р░╖р░пр░╛р░▓р▒Нр░▓р▒Л р░Ьр░╛р░Чр▒Нр░░р░др▒Нр░др░Чр░╛ р░Йр░Вр░бр░╛р░▓р░┐?"],
        "╪з╪▒╪п┘И": ["┌й█М╪з █М█Б ┘Е╪╣╪з█Б╪п█Б ╪п╪▒╪│╪к █Б█Т╪Я", "┘Е█М╪▒█Т ╪н┘В┘И┘В ┌й█М╪з █Б█М┌║╪Я", "┘Е╪м┌╛█Т ┌й┘Ж ╪и╪з╪к┘И┌║ ┌й╪з ╪о█М╪з┘Д ╪▒┌й┌╛┘Ж╪з ┌Ж╪з█Б█М█Т╪Я"],
        "р┤ор┤▓р┤пр┤╛р┤│р┤В": ["р┤И р┤Хр┤░р┤╛р╡╝ р┤╕р┤╛р┤зр╡Бр┤╡р┤╛р┤гр╡Л?", "р┤Ор┤ир╡Нр┤▒р╡Ж р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр╡╛ р┤Ор┤ир╡Нр┤др╡Кр┤Хр╡Нр┤Хр╡Ж?", "р┤Ор┤ир╡Нр┤др┤┐р╡╜ р┤Ьр┤╛р┤Чр╡Нр┤░р┤д р┤╡р╡Зр┤гр┤В?"],
    },
    "Medical": {
        "English": ["Is this an emergency?", "What treatment is recommended?", "How serious is this condition?"],
        "рд╣рд┐рдВрджреА": ["рдХреНрдпрд╛ рдпрд╣ рдЖрдкрд╛рддрд╕реНрдерд┐рддрд┐ рд╣реИ?", "рдХреМрди-рд╕рд╛ рдЙрдкрдЪрд╛рд░ рд╕реБрдЭрд╛рд╡ рд╣реИ?", "рдпрд╣ рд╕реНрдерд┐рддрд┐ рдХрд┐рддрдиреА рдЧрдВрднреАрд░ рд╣реИ?"],
        "р░др▒Жр░▓р▒Бр░Чр▒Б": ["р░Зр░жр░┐ р░Ер░др▒Нр░пр░╡р░╕р░░р░ор░╛?", "р░П р░Ър░┐р░Хр░┐р░др▒Нр░╕р░ир▒Б р░╕р▒Вр░Ър░┐р░╕р▒Нр░др░╛р░░р▒Б?", "р░И р░кр░░р░┐р░╕р▒Нр░ер░┐р░др░┐ р░Ор░Вр░д р░др▒Ар░╡р▒Нр░░р░В?"],
        "╪з╪▒╪п┘И": ["┌й█М╪з █М█Б ╪з█М┘Е╪▒╪м┘Ж╪│█М █Б█Т╪Я", "┌й┘И┘Ж ╪│╪з ╪╣┘Д╪з╪м ╪к╪м┘И█М╪▓ █Б█Т╪Я", "█М█Б ╪н╪з┘Д╪к ┌й╪к┘Ж█М ╪│┘Ж┌п█М┘Ж █Б█Т╪Я"],
        "р┤ор┤▓р┤пр┤╛р┤│р┤В": ["р┤Зр┤др╡Н р┤Ер┤Яр┤┐р┤пр┤ир╡Нр┤др┤░р┤╛р┤╡р┤╕р╡Нр┤ер┤пр┤╛р┤гр╡Л?", "р┤Пр┤др╡Н р┤Ър┤┐р┤Хр┤┐р┤др╡Нр┤╕р┤пр┤╛р┤гр╡Н р┤╢р╡Бр┤кр┤╛р╡╝р┤╢?", "р┤И р┤Ер┤╡р┤╕р╡Нр┤е р┤Ор┤др╡Нр┤░ р┤Чр╡Чр┤░р┤╡р┤ор┤╛р┤гр╡Жр┤ир╡Н?"],
    },
    "Agriculture": {
        "English": ["What disease is this?", "How do I treat this crop issue?", "When should I harvest?"],
        "рд╣рд┐рдВрджреА": ["рдпрд╣ рдХреМрди-рд╕реА рдмреАрдорд╛рд░реА рд╣реИ?", "рдЗрд╕ рдлрд╕рд▓ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рдЗрд▓рд╛рдЬ рдХреИрд╕реЗ рдХрд░реЗрдВ?", "рдХрдЯрд╛рдИ рдХрдм рдХрд░рдиреА рдЪрд╛рд╣рд┐рдП?"],
        "р░др▒Жр░▓р▒Бр░Чр▒Б": ["р░Зр░жр░┐ р░П р░╡р▒Нр░пр░╛р░зр░┐?", "р░И р░кр░Вр░Я р░╕р░ор░╕р▒Нр░пр░ир▒Б р░Ор░▓р░╛ р░кр░░р░┐р░╖р▒Нр░Хр░░р░┐р░Вр░Ър░╛р░▓р░┐?", "р░кр░Вр░Яр░ир▒Б р░Ор░кр▒Нр░кр▒Бр░бр▒Б р░Хр▒Лр░пр░╛р░▓р░┐?"],
        "╪з╪▒╪п┘И": ["█М█Б ┌й┘И┘Ж ╪│█М ╪и█М┘Е╪з╪▒█М █Б█Т╪Я", "╪з╪│ ┘Б╪╡┘Д ┌й█Т ┘Е╪│╪ж┘Д█Т ┌й╪з ╪╣┘Д╪з╪м ┌й█М╪│█Т ┘╛█Б┌Ж╪з┘Ж█М┌║╪Я", "┌й┘╣╪з╪ж█М ┌й╪и ┌й╪▒┘И┌║╪Я"],
        "р┤ор┤▓р┤пр┤╛р┤│р┤В": ["р┤Зр┤др╡Н р┤Пр┤др╡Н р┤░р╡Лр┤Чр┤ор┤╛р┤гр╡Н?", "р┤И р┤╡р┤┐р┤│ р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤В р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤кр┤░р┤┐р┤╣р┤░р┤┐р┤Хр╡Нр┤Хр┤╛р┤В?", "р┤Ор┤кр╡Нр┤кр╡Лр╡╛ р┤Хр╡Кр┤пр╡Нр┤др╡Нр┤др╡Н р┤ир┤Яр┤др╡Нр┤др┤гр┤В?"],
    },
}
EXAMPLE_GEN_Q = {
    "Law": {
        "English": ["What makes a contract valid?", "Tenant rights in India?", "Breaking a lease earlyтАФimplications?"],
        "рд╣рд┐рдВрджреА": ["рдПрдХ рдЕрдиреБрдмрдВрдз рд╡реИрдз рдХреИрд╕реЗ рд╣реЛрддрд╛ рд╣реИ?", "рднрд╛рд░рдд рдореЗрдВ рдХрд┐рд░рд╛рдпреЗрджрд╛рд░ рдХреЗ рдЕрдзрд┐рдХрд╛рд░?", "рд▓реАрдЬ рдкрд╣рд▓реЗ рддреЛрдбрд╝рдиреЗ рдкрд░ рдкреНрд░рднрд╛рд╡?"],
        "р░др▒Жр░▓р▒Бр░Чр▒Б": ["р░Тр░кр▒Нр░кр░Вр░жр░В р░Ър▒Жр░▓р▒Нр░▓р▒Бр░мр░╛р░Яр▒Б р░Хр░╛р░╡р░бр░╛р░ир░┐р░Хр░┐ р░Пр░ор░┐ р░Ер░╡р░╕р░░р░В?", "р░нр░╛р░░р░др░жр▒Зр░╢р░Вр░▓р▒Л р░Хр░┐р░░р░╛р░пр░┐р░жр░╛р░░р▒Б р░╣р░Хр▒Нр░Хр▒Бр░▓р▒Б?", "р░▓р▒Ар░Ьр▒НтАМр░ир▒Б р░ор▒Бр░Вр░жр▒З р░░р░жр▒Нр░жр▒Б р░Ър▒Зр░╕р▒Нр░др▒З р░Пр░ор░╡р▒Бр░др▒Бр░Вр░жр░┐?"],
        "╪з╪▒╪п┘И": ["┌й┘Ж ┌Ж█М╪▓┘И┌║ ╪│█Т ┘Е╪╣╪з█Б╪п█Б ╪п╪▒╪│╪к █Б┘И╪к╪з █Б█Т╪Я", "╪и┌╛╪з╪▒╪к ┘Е█М┌║ ┌й╪▒╪з█М█Б ╪п╪з╪▒ ┌й█Т ╪н┘В┘И┘В╪Я", "┘Д█М╪▓ ╪м┘Д╪п ╪о╪к┘Е ┌й╪▒┘Ж█Т ┌й█Т ╪з╪л╪▒╪з╪к╪Я"],
        "р┤ор┤▓р┤пр┤╛р┤│р┤В": ["р┤Тр┤░р╡Б р┤Хр┤░р┤╛р╡╝ р┤╕р┤╛р┤зр╡Бр┤╡р┤╛р┤Хр┤╛р╡╗ р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н р┤Жр┤╡р┤╢р╡Нр┤пр┤В?", "р┤Зр┤ир╡Нр┤др╡Нр┤пр┤пр┤┐р┤▓р╡Ж р┤Хр┤┐р┤▒р┤╛р┤пр┤Хр╡Нр┤Хр┤╛р╡╝р┤Хр╡Нр┤Хр╡Н р┤Ер┤╡р┤Хр┤╛р┤╢р┤Щр╡Нр┤Щр╡╛?", "р┤▓р╡Ар┤╕р╡Н р┤ир╡Зр┤░р┤др╡Нр┤др╡Ж р┤▒р┤жр╡Нр┤жр┤╛р┤Хр╡Нр┤Хр╡╜тАФр┤лр┤▓р┤Щр╡Нр┤Щр╡╛?"],
    },
    "Medical": {
        "English": ["I have chest painтАФwhat should I do?", "BP is 150/95; is this dangerous?", "I burned my handтАФfirst aid?"],
        "рд╣рд┐рдВрджреА": ["рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж рд╣реИтАФрдХреНрдпрд╛ рдХрд░реВрдВ?", "BP 150/95 рд╣реИ; рдХреНрдпрд╛ рдпрд╣ рдЦрддрд░рдирд╛рдХ рд╣реИ?", "рд╣рд╛рде рдЬрд▓ рдЧрдпрд╛тАФрдкреНрд░рд╛рдердорд┐рдХ рдЙрдкрдЪрд╛рд░?"],
        "р░др▒Жр░▓р▒Бр░Чр▒Б": ["р░ир░╛р░Хр▒Б р░Ыр░╛р░др░┐ р░ир▒Кр░кр▒Нр░кр░┐тАФр░Пр░В р░Ър▒Зр░пр░╛р░▓р░┐?", "р░░р░Хр▒Нр░др░кр▒Лр░Яр▒Б 150/95тАФр░Зр░жр░┐ р░кр▒Нр░░р░ор░╛р░жр░Хр░░р░ор░╛?", "р░Ър▒Зр░др░┐ р░Хр░╛р░▓р░┐р░Вр░жр░┐тАФр░лр░╕р▒Нр░Яр▒Н р░Ор░пр░┐р░бр▒Н?"],
        "╪з╪▒╪п┘И": ["╪│█М┘Ж█Т ┘Е█М┌║ ╪п╪▒╪п █Б█ТтАФ┌й█М╪з ┌й╪▒┘И┌║╪Я", "BP 150/95 █Б█Т╪Ы ┌й█М╪з █М█Б ╪о╪╖╪▒┘Ж╪з┌й рд╣реИ╪Я", "█Б╪з╪к┌╛ ╪м┘Д ┌п█М╪зтАФ╪з╪и╪к╪п╪з╪ж█М ╪╖╪и█М ╪з┘Е╪п╪з╪п╪Я"],
        "р┤ор┤▓р┤пр┤╛р┤│р┤В": ["р┤Ор┤ир┤┐р┤Хр╡Нр┤Хр╡Н р┤ир╡Жр┤Юр╡Нр┤Ър╡Бр┤╡р╡Зр┤жр┤итАФр┤Ор┤ир╡Нр┤др╡Н р┤Ър╡Жр┤пр╡Нр┤пр┤гр┤В?", "BP 150/95тАФр┤Зр┤др╡Н р┤Ер┤кр┤Хр┤Яр┤ор┤╛р┤гр╡Л?", "р┤Хр╡И р┤Ър╡Бр┤Яр╡Нр┤Яр╡Бр┤кр╡Лр┤пр┤┐тАФр┤лр┤╕р╡Нр┤▒р╡Нр┤▒р╡Н р┤Ор┤пр╡Нр┤бр╡Н?"],
    },
    "Agriculture": {
        "English": ["Tomato leaves are yellowтАФcause?", "How to identify pest damage?", "Best time to plant corn?"],
        "рд╣рд┐рдВрджреА": ["рдЯрдорд╛рдЯрд░ рдХреЗ рдкрддреНрддреЗ рдкреАрд▓реЗтАФрдХрд╛рд░рдг?", "рдХреАрдЯ рдиреБрдХрд╕рд╛рди рдХреИрд╕реЗ рдкрд╣рдЪрд╛рдиреЗрдВ?", "рдордХреНрдХрд╛ рдмреЛрдиреЗ рдХрд╛ рд╕рд╣реА рд╕рдордп?"],
        "р░др▒Жр░▓р▒Бр░Чр▒Б": ["р░Яр░ор▒Лр░Яр░╛ р░Жр░Хр▒Бр░▓р▒Б р░кр░╕р▒Бр░кр▒БтАФр░Хр░╛р░░р░гр░В?", "р░Хр▒Ар░Яр░Хр░╛р░▓ р░ир░╖р▒Нр░Яр░В р░Ор░▓р░╛ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░╛р░▓р░┐?", "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и р░Ор░кр▒Нр░кр▒Бр░бр▒Б р░ир░╛р░Яр░╛р░▓р░┐?"],
        "╪з╪▒╪п┘И": ["█М█Б ┌й┘И┘Ж ╪│█М ╪и█М┘Е╪з╪▒█М █Б█Т╪Я", "┌й█М┌С┘И┌║ ┌й╪з ┘Ж┘В╪╡╪з┘Ж ┌й█М╪│█Т ┘╛█Б┌Ж╪з┘Ж█М┌║?", "┘Е┌й╪ж█М ┌й╪и ┘Д┌п╪з╪ж█М┌║╪Я"],
        "р┤ор┤▓р┤пр┤╛р┤│р┤В": ["р┤др┤Хр╡Нр┤Хр┤╛р┤│р┤┐ р┤Зр┤▓р┤Хр╡╛ р┤ор┤Юр╡Нр┤ЮтАФр┤Хр┤╛р┤░р┤гр┤В?", "р┤Хр╡Ар┤Яр┤ир┤╛р┤╢р┤В р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤др┤┐р┤░р┤┐р┤Ър╡Нр┤Ър┤▒р┤┐р┤пр┤╛р┤В?", "р┤ор┤Хр╡Нр┤Х р┤Ър╡Лр┤│р┤В р┤╡р┤┐р┤др┤пр╡Нр┤Хр╡Нр┤Хр┤╛р╡╗ р┤ор┤┐р┤Хр┤Ър╡Нр┤Ъ р┤╕р┤ор┤пр┤В?"],
    },
}

# -------------------------------------------------
# Language Selection
# -------------------------------------------------
def show_language_selection():
    if st.session_state.get('_render_flag', False):
        return
    st.session_state['_render_flag'] = True

    st.markdown(f"<h1 style='text-align:center;'>{get_text('select_language')}</h1>", unsafe_allow_html=True)
    st.markdown(f"<p style='text-align:center; font-size:18px; margin-bottom:24px;'>{get_text('choose_language')}</p>", unsafe_allow_html=True)
    st.markdown("<hr class='hr-soft'/>", unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    with col1:
        if st.button(f"{LANGUAGES['English']} English", key="final_eng", use_container_width=True):
            st.session_state.selected_language = "English"; st.session_state.language_selected = True; st.session_state['_render_flag'] = False; st.rerun()
        if st.button(f"{LANGUAGES['р░др▒Жр░▓р▒Бр░Чр▒Б']} р░др▒Жр░▓р▒Бр░Чр▒Б", key="final_tel", use_container_width=True):
            st.session_state.selected_language = "р░др▒Жр░▓р▒Бр░Чр▒Б"; st.session_state.language_selected = True; st.session_state['_render_flag'] = False; st.rerun()
        if st.button(f"{LANGUAGES['р┤ор┤▓р┤пр┤╛р┤│р┤В']} р┤ор┤▓р┤пр┤╛р┤│р┤В", key="final_mal", use_container_width=True):
            st.session_state.selected_language = "р┤ор┤▓р┤пр┤╛р┤│р┤В"; st.session_state.language_selected = True; st.session_state['_render_flag'] = False; st.rerun()
    with col2:
        if st.button(f"{LANGUAGES['рд╣рд┐рдВрджреА']} рд╣рд┐рдВрджреА", key="final_hin", use_container_width=True):
            st.session_state.selected_language = "рд╣рд┐рдВрджреА"; st.session_state.language_selected = True; st.session_state['_render_flag'] = False; st.rerun()
        if st.button(f"{LANGUAGES['╪з╪▒╪п┘И']} ╪з╪▒╪п┘И", key="final_urd", use_container_width=True):
            st.session_state.selected_language = "╪з╪▒╪п┘И"; st.session_state.language_selected = True; st.session_state['_render_flag'] = False; st.rerun()

# -------------------------------------------------
# Sector Selection
# -------------------------------------------------
def show_sector_selection():
    st.markdown(f"<h1 style='text-align:center;'>{get_text('choose_sector')}</h1>", unsafe_allow_html=True)
    st.markdown(
        f"<p style='text-align:center; font-size:18px; margin-bottom:20px;'>{get_text('selected_language')}: "
        f"{LANGUAGES[st.session_state.selected_language]} {st.session_state.selected_language}</p>",
        unsafe_allow_html=True
    )
    st.markdown("<hr class='hr-soft'/>", unsafe_allow_html=True)

    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("<div style='text-align:center; font-size:64px; margin: 10px 0;'>тЪЦя╕П</div>", unsafe_allow_html=True)
        if st.button(sector_label("Law"), key="law_btn", use_container_width=True):
            st.session_state.selected_sector = "Law"; st.session_state.sector_selected = True; st.rerun()
        st.caption(get_text("features_law_1"))
    with col2:
        st.markdown("<div style='text-align:center; font-size:64px; margin: 10px 0;'>ЁЯПе</div>", unsafe_allow_html=True)
        if st.button(sector_label("Medical"), key="med_btn", use_container_width=True):
            st.session_state.selected_sector = "Medical"; st.session_state.sector_selected = True; st.rerun()
        st.caption(get_text("features_med_2"))
    with col3:
        st.markdown("<div style='text-align:center; font-size:64px; margin: 10px 0;'>ЁЯМ╛</div>", unsafe_allow_html=True)
        if st.button(sector_label("Agriculture"), key="agr_btn", use_container_width=True):
            st.session_state.selected_sector = "Agriculture"; st.session_state.sector_selected = True; st.rerun()
        st.caption(get_text("features_agri_1"))

    st.markdown("<br/>", unsafe_allow_html=True)
    if st.button(get_text("back_language"), use_container_width=True):
        for k in list(st.session_state.keys()):
            if k in DEFAULT_STATE:
                st.session_state[k] = DEFAULT_STATE[k]
        st.session_state['_render_flag'] = False
        st.rerun()

# -------------------------------------------------
# Main App
# -------------------------------------------------
def show_main_app():
    sector_info = SECTORS[st.session_state.selected_sector]
    st.title(f"{sector_info['emoji']} {sector_label(st.session_state.selected_sector)}{get_text('enhanced_title_suffix')}")

    lang = st.session_state.selected_language
    info_map = {"Law": get_text("info_law"), "Medical": get_text("info_medical"), "Agriculture": get_text("info_agri")}
    st.info(info_map[st.session_state.selected_sector].format(lang_flag=LANGUAGES[lang], lang=lang))

    # Sidebar
    with st.sidebar:
        st.subheader(get_text("settings"))
        if st.button(get_text("change_lang_sector"), use_container_width=True):
            for k in list(st.session_state.keys()):
                if k in DEFAULT_STATE:
                    st.session_state[k] = DEFAULT_STATE[k]
            st.session_state['_render_flag'] = False
            st.rerun()

        st.markdown("---")
        st.caption(f"{get_text('current')}: {lang} тЖТ {sector_label(st.session_state.selected_sector)}")
        st.markdown(f"### {get_text('enhanced_features_title')}")
        if st.session_state.selected_sector == "Medical":
            st.markdown(f"- {get_text('features_med_1')}")
            st.markdown(f"- {get_text('features_med_2')}")
            st.markdown(f"- {get_text('features_med_3')}")
        elif st.session_state.selected_sector == "Agriculture":
            st.markdown(f"- {get_text('features_agri_1')}")
            st.markdown(f"- {get_text('features_agri_2')}")
            st.markdown(f"- {get_text('features_agri_3')}")
        else:
            st.markdown(f"- {get_text('features_law_1')}")
            st.markdown(f"- {get_text('features_law_2')}")
            st.markdown(f"- {get_text('features_law_3')}")

    tab_doc, tab_gen = st.tabs([
        get_text("tab_doc").format(sector=sector_label(st.session_state.selected_sector)),
        get_text("tab_gen").format(sector=sector_label(st.session_state.selected_sector))
    ])

    # Document/Image Analysis
    with tab_doc:
        st.header(get_text("tab_doc").format(sector=sector_label(st.session_state.selected_sector)))
        with st.container():
            up = st.file_uploader(get_text("uploader_any"),
                                  type=["pdf", "docx", "txt", "jpg", "jpeg", "png"],
                                  help=get_text("uploader_any"))
            st.markdown("<div class='hr-soft'></div>", unsafe_allow_html=True)
            colA, colB = st.columns([1, 2])
            with colA:
                sample_btn = st.button(get_text("sample_doc_btn").format(sector=sector_label(st.session_state.selected_sector)))
            with colB:
                st.caption(get_text("sample_try"))

        if sample_btn and not up:
            samples = {
                "Law": """RENTAL AGREEMENT

Landlord: John Smith
Tenant: Mary Johnson
Property: 123 Main St, Apartment 2B
Rent: $1,200/month
Security Deposit: $1,200
Lease Term: 12 months

Terms:
1. Rent due on 1st of each month
2. Late fee: $50 after 5 days
3. No pets allowed
4. Tenant responsible for utilities
5. 30-day notice required for termination
""",
                "Medical": """MEDICAL REPORT

Patient: John Doe, Age 45

Vital Signs:
- Blood Pressure: 145/92 mmHg (HIGH)
- Heart Rate: 85 bpm
- Temperature: 98.6┬░F
- Weight: 185 lbs

Lab Results:
- Blood Glucose: 165 mg/dL (HIGH)
- Cholesterol: 240 mg/dL (HIGH)
- HbA1c: 7.2% (ELEVATED)

Diagnosis: Type 2 Diabetes, Hypertension

Recommendations:
1. Start Metformin 500mg twice daily
2. Blood pressure medication
3. Low carb diet
4. Exercise 30 min daily
5. Follow-up in 4 weeks
""",
                "Agriculture": """SOIL ANALYSIS REPORT

Farm: Green Valley Farm, Field Section A
Date: March 20, 2024
Crop: Wheat (Winter Variety)

Soil Test Results:
- pH Level: 6.2 (Slightly Acidic)
- Nitrogen (N): 35 ppm (LOW)
- Phosphorus (P): 18 ppm (ADEQUATE)
- Potassium (K): 165 ppm (HIGH)
- Organic Matter: 2.8%
- Soil Type: Clay Loam

Recommendations:
1. Apply 120 kg/ha Urea (Nitrogen)
2. Add lime to increase pH to 6.5тАУ7.0
3. Expected yield: 4.5 tons/ha
4. Irrigation needed: 400 mm during growing season
5. Next soil test: 6 months
"""
            }
            st.session_state.doc_text = samples[st.session_state.selected_sector]
            with st.spinner(get_text("generating")):
                st.session_state.summary = ask_ai(document_text=st.session_state.doc_text, mode="summary")

        if up:
            file_extension = up.name.lower().split(".")[-1]
            if file_extension in ("jpg", "jpeg", "png"):
                st.subheader(get_text("image_analysis_header"))
                image = Image.open(up)
                st.image(image, caption=get_text("uploaded_image_caption").format(sector=sector_label(st.session_state.selected_sector)), use_column_width=True)

                img_byte_array = io.BytesIO()
                image.save(img_byte_array, format='JPEG')
                image_bytes = img_byte_array.getvalue()

                with st.spinner(get_text("analyzing_image")):
                    st.session_state.summary = ask_ai(mode="summary", image_bytes=image_bytes)

                with st.spinner(get_text("extracting_image_text")):
                    ocr_text = extract_text_from_image(up)
                    if ocr_text:
                        st.session_state.doc_text = ocr_text
                        st.subheader(get_text("analysis_summary"))
                        st.text_area(get_text("document"), ocr_text, height=150)
            else:
                with st.spinner(get_text("extracting")):
                    text = extract_text(up)
                if text:
                    st.session_state.doc_text = text
                    with st.spinner(get_text("generating")):
                        st.session_state.summary = ask_ai(document_text=text, mode="summary")
                else:
                    st.warning(get_text("no_text"))

        if st.session_state.summary:
            st.subheader(get_text("enhanced_analysis_header").format(sector=sector_label(st.session_state.selected_sector)))
            st.write(st.session_state.summary)
            tts_speak_toggle(st.session_state.summary, st.session_state.selected_language)

            st.divider()
            st.subheader(get_text("chat_about_analysis"))

            for m in st.session_state.chat_history:
                with st.chat_message(m["role"]):
                    st.markdown(m["content"])
                    if m["role"] == "assistant":
                        tts_speak_toggle(m["content"], st.session_state.selected_language)

            try_examples = EXAMPLE_DOC_Q.get(st.session_state.selected_sector, {}).get(st.session_state.selected_language, [])
            if try_examples:
                st.caption(f"{get_text('examples_try')} {' тАв '.join(try_examples)}")

            q = st.chat_input(get_text("chat_placeholder"))
            if q:
                st.session_state.chat_history.append({"role": "user", "content": q})
                with st.spinner(get_text("thinking")):
                    ans = ask_ai(document_text=st.session_state.doc_text, query=q, mode="chat", image_bytes=None)
                st.session_state.chat_history.append({"role": "assistant", "content": ans})
                st.rerun()

    # General Q&A
    with tab_gen:
        st.header(get_text("gen_help_header").format(sector=sector_label(st.session_state.selected_sector)))
        st.caption(get_text("gen_help_caption").format(sector_lower=sector_label(st.session_state.selected_sector).lower()))

        for m in st.session_state.general_messages:
            with st.chat_message(m["role"]):
                st.markdown(m["content"])
                if m["role"] == "assistant":
                    tts_speak_toggle(m["content"], st.session_state.selected_language)

        try_examples2 = EXAMPLE_GEN_Q.get(st.session_state.selected_sector, {}).get(st.session_state.selected_language, [])
        if try_examples2:
            st.caption(f"{get_text('examples_caption')} {' тАв '.join(try_examples2)}")

        q2 = st.chat_input(get_text("gen_chat_placeholder").format(sector_lower=sector_label(st.session_state.selected_sector).lower()))
        if q2:
            st.session_state.general_messages.append({"role": "user", "content": q2})
            with st.spinner(get_text("thinking")):
                ans2 = ask_ai(query=q2, mode="general")
            st.session_state.general_messages.append({"role": "assistant", "content": ans2})
            st.rerun()

    # Disclaimer
    lines = ["---", get_text("disclaimer_block_header")]
    if st.session_state.selected_sector == "Medical":
        lines.append(get_text("disclaimer_med"))
    elif st.session_state.selected_sector == "Law":
        lines.append(get_text("disclaimer_law"))
    else:
        lines.append(get_text("disclaimer_agri"))
    lines.append(get_text("disclaimer_footer"))
    st.markdown("\n".join(lines))

# -------------------------------------------------
# Main
# -------------------------------------------------
def main():
    if not st.session_state.language_selected:
        st.session_state.pop('_render_flag', None)
        show_language_selection()
    elif not st.session_state.sector_selected:
        st.session_state.pop('_render_flag', None)
        show_sector_selection()
    else:
        st.session_state.pop('_render_flag', None)
        show_main_app()

if __name__ == "__main__":
    main()
